{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.2", "generated_at": "2023-06-30T13:49:49.497594Z", "invocation_id": "e7f8e5c4-3d45-4dfd-8af5-02098262ad93", "env": {}, "project_id": "10cdafb6fe4d66dfed21f899bd59c563", "user_id": "33dab611-f278-4e2b-8c20-7cab4bf025ec", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.villo_cjaminon_team2.analytics_stand_per_hour": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_ANALYTICS", "name": "analytics_stand_per_hour", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "analytics\\analytics_stand_per_hour.sql", "original_file_path": "models\\analytics\\analytics_stand_per_hour.sql", "unique_id": "model.villo_cjaminon_team2.analytics_stand_per_hour", "fqn": ["villo_cjaminon_team2", "analytics", "analytics_stand_per_hour"], "alias": "analytics_stand_per_hour", "checksum": {"name": "sha256", "checksum": "2d6a76ac1e869abbe1ba99e59eecc491b8be5da962302c54d9f0928318307d06"}, "config": {"enabled": true, "alias": null, "schema": "ANALYTICS", "database": null, "tags": ["villo", "analytics"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "analytics"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "ANALYTICS", "transient": false, "tags": ["villo", "analytics"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.7019775, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_ANALYTICS.analytics_stand_per_hour", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n-- 4100 number of total bikes\nSELECT\n    communes as stand_commune,\n    address as stand_address,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    4100 - AVG(available_bikes)::INTEGER AS average_use_bike,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands\nFROM {{ref('str_villo_communes_geo')}}\nGROUP BY communes, ADDRESS, recording_time_hr", "language": "sql", "refs": [{"name": "str_villo_communes_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\analytics_stand_per_hour.sql", "compiled": true, "compiled_code": "\n-- 4100 number of total bikes\nSELECT\n    communes as stand_commune,\n    address as stand_address,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    4100 - AVG(available_bikes)::INTEGER AS average_use_bike,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands\nFROM OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_communes_geo\nGROUP BY communes, ADDRESS, recording_time_hr", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.analytics_stand_weather": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_ANALYTICS", "name": "analytics_stand_weather", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "analytics\\analytics_stand_weather.sql", "original_file_path": "models\\analytics\\analytics_stand_weather.sql", "unique_id": "model.villo_cjaminon_team2.analytics_stand_weather", "fqn": ["villo_cjaminon_team2", "analytics", "analytics_stand_weather"], "alias": "analytics_stand_weather", "checksum": {"name": "sha256", "checksum": "38b09ae839a66d8ca8bfa21962e3c6bb9525ee4d9dbac114cca93f9101e66e09"}, "config": {"enabled": true, "alias": null, "schema": "ANALYTICS", "database": null, "tags": ["villo", "analytics"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "analytics"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "ANALYTICS", "transient": false, "tags": ["villo", "analytics"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.7159808, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_ANALYTICS.analytics_stand_weather", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n-- we take the latest value based on the timestamp  (we have a lot of duplicated due to bad data quality)\nwith str_weather_communes_geo_distinct AS (\n    select *,\n        row_number() over (partition by code_ins, recording_time_ts order by timestamp desc) as rn\n    from {{ ref('str_weather_communes_geo') }}\n    qualify rn = 1\n)\n\nselect\n    v.communes                                         as station_commune,\n    MODE(v.code_ins)                                   as code_ins,\n    v.address                                          as station_address,\n    MODE(v.name)                                       as station_name,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    MODE(w.weather_type)                               as weather_type_mode,\n    AVG(w.pressure)                                    as pressure_avg,\n    AVG(w.humidity)                                    as humidity_avg,\n    AVG(w.temperature)                                 as temp_avg,\n    AVG(w.apparentTemperature)                         as apparentTemperature_avg,\n    AVG(available_bikes)::INTEGER                      as average_available_bikes,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands,\n    AVG(available_bike_stands)                         as average_available_bike_stands,\n    AVG(bike_stands)                                   as station_capacity,\n    MODE(v.status)                                     as station_status         \nfrom {{ ref('str_villo_communes_geo') }} v\nleft join str_weather_communes_geo_distinct w\non to_varchar(v.last_update_ts::timestamp, 'yyyymmddhh') = to_varchar(w.recording_time_ts::timestamp, 'yyyymmddhh')\nGROUP BY v.COMMUNES, ADDRESS, recording_time_hr", "language": "sql", "refs": [{"name": "str_weather_communes_geo", "package": null, "version": null}, {"name": "str_villo_communes_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.str_weather_communes_geo", "model.villo_cjaminon_team2.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\analytics_stand_weather.sql", "compiled": true, "compiled_code": "\n\n-- we take the latest value based on the timestamp  (we have a lot of duplicated due to bad data quality)\nwith str_weather_communes_geo_distinct AS (\n    select *,\n        row_number() over (partition by code_ins, recording_time_ts order by timestamp desc) as rn\n    from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_communes_geo\n    qualify rn = 1\n)\n\nselect\n    v.communes                                         as station_commune,\n    MODE(v.code_ins)                                   as code_ins,\n    v.address                                          as station_address,\n    MODE(v.name)                                       as station_name,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    MODE(w.weather_type)                               as weather_type_mode,\n    AVG(w.pressure)                                    as pressure_avg,\n    AVG(w.humidity)                                    as humidity_avg,\n    AVG(w.temperature)                                 as temp_avg,\n    AVG(w.apparentTemperature)                         as apparentTemperature_avg,\n    AVG(available_bikes)::INTEGER                      as average_available_bikes,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands,\n    AVG(available_bike_stands)                         as average_available_bike_stands,\n    AVG(bike_stands)                                   as station_capacity,\n    MODE(v.status)                                     as station_status         \nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_communes_geo v\nleft join str_weather_communes_geo_distinct w\non to_varchar(v.last_update_ts::timestamp, 'yyyymmddhh') = to_varchar(w.recording_time_ts::timestamp, 'yyyymmddhh')\nGROUP BY v.COMMUNES, ADDRESS, recording_time_hr", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.analytics_stand_weather_2": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_ANALYTICS", "name": "analytics_stand_weather_2", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "analytics\\analytics_stand_weather_2.sql", "original_file_path": "models\\analytics\\analytics_stand_weather_2.sql", "unique_id": "model.villo_cjaminon_team2.analytics_stand_weather_2", "fqn": ["villo_cjaminon_team2", "analytics", "analytics_stand_weather_2"], "alias": "analytics_stand_weather_2", "checksum": {"name": "sha256", "checksum": "38f8da9ddc1e9e45486ee6c4411455a31f750d093f55ac920db0d2cfe06a703c"}, "config": {"enabled": true, "alias": null, "schema": "ANALYTICS", "database": null, "tags": ["villo", "analytics"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "analytics"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "ANALYTICS", "transient": false, "tags": ["villo", "analytics"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.7199965, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_ANALYTICS.analytics_stand_weather_2", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\n-- we take the latest value based on the timestamp  (we have a lot of duplicated due to bad data quality)\nwith str_weather_communes_geo_distinct AS (\n    select *,\n        row_number() over (partition by code_ins, recording_time_ts order by timestamp desc) as rn\n    from {{ ref('str_weather_communes_geo') }}\n    qualify rn = 1\n)\n\nselect\n    v.communes as stand_commune,\n    v.code_ins as commune_code,\n    address as stand_address,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    MODE(w.weather_type)                               as weather_type_mode,\n    AVG(w.pressure)                                    as pressure_avg,\n    AVG(w.humidity)                                    as humidity_avg,\n    AVG(w.temperature)                                 as temp_avg,\n    AVG(w.apparentTemperature)                         as apptemp_avg,\n    AVG(available_bikes)::INTEGER AS average_available_bikes,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands,\n    AVG(available_bike_stands)::INTEGER AS average_available_bike_stands,\n    AVG(bike_stands)::INTEGER AS station_capacity\n\nfrom {{ ref('str_villo_communes_geo') }} v\nleft join str_weather_communes_geo_distinct w\non v.code_ins = w.code_ins\n    and to_varchar(v.last_update_ts::timestamp, 'yyyymmddhh') = to_varchar(w.recording_time_ts::timestamp, 'yyyymmddhh')\nGROUP BY v.COMMUNES, v.code_ins, ADDRESS, recording_time_hr", "language": "sql", "refs": [{"name": "str_weather_communes_geo", "package": null, "version": null}, {"name": "str_villo_communes_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.str_weather_communes_geo", "model.villo_cjaminon_team2.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\analytics_stand_weather_2.sql", "compiled": true, "compiled_code": "\n\n-- we take the latest value based on the timestamp  (we have a lot of duplicated due to bad data quality)\nwith str_weather_communes_geo_distinct AS (\n    select *,\n        row_number() over (partition by code_ins, recording_time_ts order by timestamp desc) as rn\n    from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_communes_geo\n    qualify rn = 1\n)\n\nselect\n    v.communes as stand_commune,\n    v.code_ins as commune_code,\n    address as stand_address,\n    DATE_TRUNC('HOUR', TO_TIMESTAMP(last_update/1000)) as recording_time_hr,\n    MODE(w.weather_type)                               as weather_type_mode,\n    AVG(w.pressure)                                    as pressure_avg,\n    AVG(w.humidity)                                    as humidity_avg,\n    AVG(w.temperature)                                 as temp_avg,\n    AVG(w.apparentTemperature)                         as apptemp_avg,\n    AVG(available_bikes)::INTEGER AS average_available_bikes,\n    AVG(bike_stands - (available_bikes + available_bike_stands))::INTEGER as average_broken_stands,\n    AVG(available_bike_stands)::INTEGER AS average_available_bike_stands,\n    AVG(bike_stands)::INTEGER AS station_capacity\n\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_communes_geo v\nleft join str_weather_communes_geo_distinct w\non v.code_ins = w.code_ins\n    and to_varchar(v.last_update_ts::timestamp, 'yyyymmddhh') = to_varchar(w.recording_time_ts::timestamp, 'yyyymmddhh')\nGROUP BY v.COMMUNES, v.code_ins, ADDRESS, recording_time_hr", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_current_weather": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_current_weather", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_current_weather.sql", "original_file_path": "models\\raw\\raw_current_weather.sql", "unique_id": "model.villo_cjaminon_team2.raw_current_weather", "fqn": ["villo_cjaminon_team2", "raw", "raw_current_weather"], "alias": "raw_current_weather", "checksum": {"name": "sha256", "checksum": "49a7de3a7085e3045e9f100f10df3c1c5b072254b173f85043371ca92db872e4"}, "config": {"enabled": true, "alias": "raw_current_weather", "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "recording_time", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "timestamp", "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "incremental", "alias": "raw_current_weather", "unique_key": "recording_time", "sort": "timestamp"}, "created_at": 1688129737.723994, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_current_weather", "raw_code": "{{\n    config(\n        alias=\"raw_current_weather\",\n        materialized='incremental',\n        unique_key='recording_time',\n        sort='timestamp'\n    )\n}}\n\n\n\nselect\n    distinct\n    DATA:\"currently.time\"::number                   as recording_time,\n    TO_TIMESTAMP_NTZ(DATA:\"currently.time\"::number) as recording_time_ts,\n    DATA:\"currently.pressure\"                       as pressure,\n    DATA:\"currently.humidity\"                       as humidity,\n    DATA:\"currently.temperature\"                    as temperature,\n    DATA:\"currently.apparentTemperature\"            as apparentTemperature,\n    DATA:\"currently.icon\"                           as weather_type,\n    DATA:\"latitude\"::decimal(38,4) as latitude,\n    DATA:\"longitude\"::decimal(38,4) as longitude,\n    timestamp\nfrom {{source('source_data','raw_weather')}}\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_current_weather.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    distinct\n    DATA:\"currently.time\"::number                   as recording_time,\n    TO_TIMESTAMP_NTZ(DATA:\"currently.time\"::number) as recording_time_ts,\n    DATA:\"currently.pressure\"                       as pressure,\n    DATA:\"currently.humidity\"                       as humidity,\n    DATA:\"currently.temperature\"                    as temperature,\n    DATA:\"currently.apparentTemperature\"            as apparentTemperature,\n    DATA:\"currently.icon\"                           as weather_type,\n    DATA:\"latitude\"::decimal(38,4) as latitude,\n    DATA:\"longitude\"::decimal(38,4) as longitude,\n    timestamp\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather\n\n\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_current_weather)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_last_bike_stands": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_last_bike_stands", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_last_bike_stands.sql", "original_file_path": "models\\raw\\raw_last_bike_stands.sql", "unique_id": "model.villo_cjaminon_team2.raw_last_bike_stands", "fqn": ["villo_cjaminon_team2", "raw", "raw_last_bike_stands"], "alias": "raw_last_bike_stands", "checksum": {"name": "sha256", "checksum": "c8d4cadb2aaf3194fb5476db82cae057708f58db597f86387f356f96bfccc2a7"}, "config": {"enabled": true, "alias": null, "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.7349944, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_last_bike_stands", "raw_code": "{{ \n    config(\n        materialized='table'\n    ) \n}}\n\nselect *\nfrom {{ ref('raw_villo') }}\nqualify row_number() over (partition by number order by LAST_UPDATE desc) = 1", "language": "sql", "refs": [{"name": "raw_villo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_last_bike_stands.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_villo_1\nqualify row_number() over (partition by number order by LAST_UPDATE desc) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_last_closed_bike_stands": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_last_closed_bike_stands", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_last_closed_bike_stands.sql", "original_file_path": "models\\raw\\raw_last_closed_bike_stands.sql", "unique_id": "model.villo_cjaminon_team2.raw_last_closed_bike_stands", "fqn": ["villo_cjaminon_team2", "raw", "raw_last_closed_bike_stands"], "alias": "raw_last_closed_bike_stands", "checksum": {"name": "sha256", "checksum": "9b36dd5ae222de840c3dab39af5e5fefc8dcb880decf258a17f6c27fe6afe90e"}, "config": {"enabled": true, "alias": null, "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.738981, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_last_closed_bike_stands", "raw_code": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nselect *\nfrom {{ ref('raw_last_bike_stands') }}", "language": "sql", "refs": [{"name": "raw_last_bike_stands", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.raw_last_bike_stands"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_last_closed_bike_stands.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_last_bike_stands", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_unavailable_bike_stands": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_unavailable_bike_stands", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_unavailable_bike_stands.sql", "original_file_path": "models\\raw\\raw_unavailable_bike_stands.sql", "unique_id": "model.villo_cjaminon_team2.raw_unavailable_bike_stands", "fqn": ["villo_cjaminon_team2", "raw", "raw_unavailable_bike_stands"], "alias": "raw_unavailable_bike_stands", "checksum": {"name": "sha256", "checksum": "05abc19148e3ef29107fb95985bacf18052dc4e3eeac6de35b7b40412db5accf"}, "config": {"enabled": true, "alias": null, "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "table"}, "created_at": 1688129737.7419798, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_unavailable_bike_stands", "raw_code": "{{ config(materialized='table') }}\n\nselect *,\n    (BIKE_STANDS-AVAILABLE_BIKES - AVAILABLE_BIKE_STANDS) as UNAVAILABLE_STANDS\nfrom {{ ref('raw_villo') }}\norder by LAST_UPDATE", "language": "sql", "refs": [{"name": "raw_villo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_unavailable_bike_stands.sql", "compiled": true, "compiled_code": "\n\nselect *,\n    (BIKE_STANDS-AVAILABLE_BIKES - AVAILABLE_BIKE_STANDS) as UNAVAILABLE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_villo_1\norder by LAST_UPDATE", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_villo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_villo", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_villo.sql", "original_file_path": "models\\raw\\raw_villo.sql", "unique_id": "model.villo_cjaminon_team2.raw_villo", "fqn": ["villo_cjaminon_team2", "raw", "raw_villo"], "alias": "raw_villo_1", "checksum": {"name": "sha256", "checksum": "f1d44baea0ef48685a8709aeae301bd44d4b4fc68932252573c1f0af1ff48561"}, "config": {"enabled": true, "alias": "raw_villo_1", "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "TIMESTAMP", "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "incremental", "alias": "raw_villo_1", "sort": "TIMESTAMP"}, "created_at": 1688129737.7489803, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_villo_1", "raw_code": "{{\n  config(\n    alias='raw_villo_1',\n    materialized='incremental',\n    sort='TIMESTAMP'\n  )\n}}\n\n-- materialized='table' -> overwrite data\n\nselect\n  concat(DATA:number::number, DATA:last_update::number) as UID,\n  TIMESTAMP,\n  DATA:address::varchar(200) as ADDRESS,\n  DATA:available_bike_stands::number as AVAILABLE_BIKE_STANDS,\n  DATA:available_bikes::number as AVAILABLE_BIKES,\n  DATA:banking::boolean as BANKING,\n  DATA:bike_stands::number as BIKE_STANDS,\n  DATA:bonus::boolean as BONUS,\n  DATA:contract_name::varchar(100) as CONTRACT_NAME,\n  DATA:last_update::number as LAST_UPDATE,\n  TO_TIMESTAMP_NTZ(DATA:last_update::number/1000) as LAST_UPDATE_TS,\n  DATA:name::varchar(200) as NAME,\n  DATA:number::number as NUMBER,\n  DATA:\"position.lat\"::float as lat,\n  DATA:\"position.lng\"::float as long,\n  DATA:status::varchar(20) as STATUS\nfrom {{source('source_data','raw_villo')}}\n\n-- take only the last 2 days as an example (so the models do not run too long)\nwhere TIMESTAMP >= dateadd(day, -14, getdate())\n\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  and TIMESTAMP > (select max(TIMESTAMP) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_villo.sql", "compiled": true, "compiled_code": "\n\n-- materialized='table' -> overwrite data\n\nselect\n  concat(DATA:number::number, DATA:last_update::number) as UID,\n  TIMESTAMP,\n  DATA:address::varchar(200) as ADDRESS,\n  DATA:available_bike_stands::number as AVAILABLE_BIKE_STANDS,\n  DATA:available_bikes::number as AVAILABLE_BIKES,\n  DATA:banking::boolean as BANKING,\n  DATA:bike_stands::number as BIKE_STANDS,\n  DATA:bonus::boolean as BONUS,\n  DATA:contract_name::varchar(100) as CONTRACT_NAME,\n  DATA:last_update::number as LAST_UPDATE,\n  TO_TIMESTAMP_NTZ(DATA:last_update::number/1000) as LAST_UPDATE_TS,\n  DATA:name::varchar(200) as NAME,\n  DATA:number::number as NUMBER,\n  DATA:\"position.lat\"::float as lat,\n  DATA:\"position.lng\"::float as long,\n  DATA:status::varchar(20) as STATUS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo\n\n-- take only the last 2 days as an example (so the models do not run too long)\nwhere TIMESTAMP >= dateadd(day, -14, getdate())\n\n\n\n\n  -- this filter will only be applied on an incremental run\n  and TIMESTAMP > (select max(TIMESTAMP) from OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_villo_1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.raw_weather_1": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_RAW", "name": "raw_weather_1", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "raw\\raw_weather_1.sql", "original_file_path": "models\\raw\\raw_weather_1.sql", "unique_id": "model.villo_cjaminon_team2.raw_weather_1", "fqn": ["villo_cjaminon_team2", "raw", "raw_weather_1"], "alias": "raw_weather_1", "checksum": {"name": "sha256", "checksum": "523d081b2577617b2817c07b8ce4c59dfeef537f988c3a39e4801d285d366ccc"}, "config": {"enabled": true, "alias": "raw_weather_1", "schema": "RAW", "database": null, "tags": ["villo", "raw"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "recording_time", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "timestamp", "post-hook": [], "pre-hook": []}, "tags": ["villo", "raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "RAW", "transient": false, "tags": ["villo", "raw"], "enabled": true, "materialized": "incremental", "alias": "raw_weather_1", "unique_key": "recording_time", "sort": "timestamp"}, "created_at": 1688129737.75798, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_weather_1", "raw_code": "{{\n    config(\n        alias=\"raw_weather_1\",\n        materialized='incremental',\n        unique_key='recording_time',\n        sort='timestamp'\n    )\n}}\n\n\n\n\nselect\n    distinct\n    hourly.value:\"time\" as recording_time,\n    TO_TIMESTAMP_NTZ(hourly.value:\"time\"::number) as recording_time_ts,\n    hourly.value:\"pressure\" as pressure,\n    hourly.value:\"humidity\" as humidity,\n    hourly.value:\"temperature\" as temperature,\n    hourly.value:\"apparentTemperature\" as apparentTemperature,\n    hourly.value:\"icon\" as weather_type,\n    DATA:\"latitude\"::decimal(38,4) as latitude,\n    DATA:\"longitude\"::decimal(38,4) as longitude,\n    timestamp\nfrom {{source('source_data','raw_weather')}},\ntable(flatten(DATA:\"hourly.data\")) hourly -- flatten the list inside the json field\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\raw_weather_1.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    distinct\n    hourly.value:\"time\" as recording_time,\n    TO_TIMESTAMP_NTZ(hourly.value:\"time\"::number) as recording_time_ts,\n    hourly.value:\"pressure\" as pressure,\n    hourly.value:\"humidity\" as humidity,\n    hourly.value:\"temperature\" as temperature,\n    hourly.value:\"apparentTemperature\" as apparentTemperature,\n    hourly.value:\"icon\" as weather_type,\n    DATA:\"latitude\"::decimal(38,4) as latitude,\n    DATA:\"longitude\"::decimal(38,4) as longitude,\n    timestamp\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather,\ntable(flatten(DATA:\"hourly.data\")) hourly -- flatten the list inside the json field\n\n\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_weather_1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.str_villo_communes_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_STR", "name": "str_villo_communes_geo", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "structured\\str_villo_communes_geo.sql", "original_file_path": "models\\structured\\str_villo_communes_geo.sql", "unique_id": "model.villo_cjaminon_team2.str_villo_communes_geo", "fqn": ["villo_cjaminon_team2", "structured", "str_villo_communes_geo"], "alias": "str_villo_communes_geo", "checksum": {"name": "sha256", "checksum": "a59ee2843300aab1ba0deae2afa1f3681f5f2a7240c6c85ba7dbdcbc229f742b"}, "config": {"enabled": true, "alias": null, "schema": "STR", "database": null, "tags": ["villo", "str"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "TIMESTAMP", "post-hook": [], "pre-hook": []}, "tags": ["villo", "str"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "STR", "transient": false, "tags": ["villo", "str"], "enabled": true, "materialized": "incremental", "sort": "TIMESTAMP"}, "created_at": 1688129737.764984, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_communes_geo", "raw_code": "{{\n    config(\n        materialized='incremental',\n        sort='TIMESTAMP'\n    )\n}}\n\nwith str_villo_geo AS (\n    select *\n    from {{ref('str_villo_geo')}}\n),\n\nref_communes_bxl_geo AS (\n    select *\n    from {{source('reference_data','communes_bxl_geo')}}\n)\n\nselect\n    str_villo_geo.uid,\n    str_villo_geo.timestamp,\n    str_villo_geo.address,\n    str_villo_geo.available_bike_stands,\n    str_villo_geo.available_bikes,\n    str_villo_geo.banking,\n    str_villo_geo.bike_stands,\n    str_villo_geo.bonus,\n    str_villo_geo.contract_name,\n    str_villo_geo.last_update,\n    str_villo_geo.last_update_ts,\n    str_villo_geo.name,\n    str_villo_geo.number,\n    str_villo_geo.status,\n    ref_communes_bxl_geo.admunafr,\n    ref_communes_bxl_geo.communes,\n    ref_communes_bxl_geo.code_ins,\n    ref_communes_bxl_geo.arrond\nfrom str_villo_geo\ninner join ref_communes_bxl_geo\nwhere st_contains(ref_communes_bxl_geo.polygon, str_villo_geo.geopoint) = 1\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  and TIMESTAMP > (select max(TIMESTAMP) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [{"name": "str_villo_geo", "package": null, "version": null}], "sources": [["reference_data", "communes_bxl_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.villo_cjaminon_team2.reference_data.communes_bxl_geo", "model.villo_cjaminon_team2.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\str_villo_communes_geo.sql", "compiled": true, "compiled_code": "\n\nwith str_villo_geo AS (\n    select *\n    from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_geo\n),\n\nref_communes_bxl_geo AS (\n    select *\n    from OPENMETA_CJAMINON_TEAM2.public_str.communes_bxl_geo\n)\n\nselect\n    str_villo_geo.uid,\n    str_villo_geo.timestamp,\n    str_villo_geo.address,\n    str_villo_geo.available_bike_stands,\n    str_villo_geo.available_bikes,\n    str_villo_geo.banking,\n    str_villo_geo.bike_stands,\n    str_villo_geo.bonus,\n    str_villo_geo.contract_name,\n    str_villo_geo.last_update,\n    str_villo_geo.last_update_ts,\n    str_villo_geo.name,\n    str_villo_geo.number,\n    str_villo_geo.status,\n    ref_communes_bxl_geo.admunafr,\n    ref_communes_bxl_geo.communes,\n    ref_communes_bxl_geo.code_ins,\n    ref_communes_bxl_geo.arrond\nfrom str_villo_geo\ninner join ref_communes_bxl_geo\nwhere st_contains(ref_communes_bxl_geo.polygon, str_villo_geo.geopoint) = 1\n\n\n\n  -- this filter will only be applied on an incremental run\n  and TIMESTAMP > (select max(TIMESTAMP) from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_communes_geo)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.str_villo_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_STR", "name": "str_villo_geo", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "structured\\str_villo_geo.sql", "original_file_path": "models\\structured\\str_villo_geo.sql", "unique_id": "model.villo_cjaminon_team2.str_villo_geo", "fqn": ["villo_cjaminon_team2", "structured", "str_villo_geo"], "alias": "str_villo_geo", "checksum": {"name": "sha256", "checksum": "518287d66ff3c7c69c09b154879111e9930f6cda98026b75837e6ec2047fc958"}, "config": {"enabled": true, "alias": null, "schema": "STR", "database": null, "tags": ["villo", "str"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "TIMESTAMP", "post-hook": [], "pre-hook": []}, "tags": ["villo", "str"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "STR", "transient": false, "tags": ["villo", "str"], "enabled": true, "materialized": "incremental", "sort": "TIMESTAMP"}, "created_at": 1688129737.7729793, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_geo", "raw_code": "{{\n  config(\n    materialized='incremental',\n    sort='TIMESTAMP'\n  )\n}}\n\nselect\n  *,\n  st_makepoint(long,lat) as geopoint\nfrom {{ref('raw_villo')}}\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  where TIMESTAMP > (select max(TIMESTAMP) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [{"name": "raw_villo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.villo_cjaminon_team2.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\str_villo_geo.sql", "compiled": true, "compiled_code": "\n\nselect\n  *,\n  st_makepoint(long,lat) as geopoint\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_villo_1\n\n\n\n  -- this filter will only be applied on an incremental run\n  where TIMESTAMP > (select max(TIMESTAMP) from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_geo)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.str_weather_communes_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_STR", "name": "str_weather_communes_geo", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "structured\\str_weather_communes_geo.sql", "original_file_path": "models\\structured\\str_weather_communes_geo.sql", "unique_id": "model.villo_cjaminon_team2.str_weather_communes_geo", "fqn": ["villo_cjaminon_team2", "structured", "str_weather_communes_geo"], "alias": "str_weather_communes_geo", "checksum": {"name": "sha256", "checksum": "17e2d12385b57af8476f80d6e1b7af35178a213857b7f1f32087dee4d72cc7e8"}, "config": {"enabled": true, "alias": null, "schema": "STR", "database": null, "tags": ["villo", "str"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "timestamp", "post-hook": [], "pre-hook": []}, "tags": ["villo", "str"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "STR", "transient": false, "tags": ["villo", "str"], "enabled": true, "materialized": "incremental", "sort": "timestamp"}, "created_at": 1688129737.7799802, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_communes_geo", "raw_code": "{{\n    config(\n        materialized='incremental',\n        sort='timestamp'\n    )\n}}\n\nwith str_weather_geo AS (\n    select *\n    from {{ref('str_weather_geo')}}\n),\n\nref_communes_bxl_geo AS (\n    select *\n    from {{source('reference_data','communes_bxl_geo')}}\n)\n\nselect\n    str_weather_geo.recording_time_ts,\n    str_weather_geo.pressure,\n    str_weather_geo.humidity,\n    str_weather_geo.temperature,\n    str_weather_geo.apparentTemperature,\n    str_weather_geo.timestamp,\n    str_weather_geo.weather_type,\n    ref_communes_bxl_geo.admunafr,\n    ref_communes_bxl_geo.communes,\n    ref_communes_bxl_geo.code_ins,\n    ref_communes_bxl_geo.arrond\nfrom str_weather_geo\ninner join ref_communes_bxl_geo\nwhere st_contains(ref_communes_bxl_geo.polygon, str_weather_geo.geopoint) = 1\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  and str_weather_geo.timestamp > (select max(timestamp) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [{"name": "str_weather_geo", "package": null, "version": null}], "sources": [["reference_data", "communes_bxl_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.villo_cjaminon_team2.reference_data.communes_bxl_geo", "model.villo_cjaminon_team2.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\str_weather_communes_geo.sql", "compiled": true, "compiled_code": "\n\nwith str_weather_geo AS (\n    select *\n    from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_geo\n),\n\nref_communes_bxl_geo AS (\n    select *\n    from OPENMETA_CJAMINON_TEAM2.public_str.communes_bxl_geo\n)\n\nselect\n    str_weather_geo.recording_time_ts,\n    str_weather_geo.pressure,\n    str_weather_geo.humidity,\n    str_weather_geo.temperature,\n    str_weather_geo.apparentTemperature,\n    str_weather_geo.timestamp,\n    str_weather_geo.weather_type,\n    ref_communes_bxl_geo.admunafr,\n    ref_communes_bxl_geo.communes,\n    ref_communes_bxl_geo.code_ins,\n    ref_communes_bxl_geo.arrond\nfrom str_weather_geo\ninner join ref_communes_bxl_geo\nwhere st_contains(ref_communes_bxl_geo.polygon, str_weather_geo.geopoint) = 1\n\n\n\n  -- this filter will only be applied on an incremental run\n  and str_weather_geo.timestamp > (select max(timestamp) from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_communes_geo)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.str_weather_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_STR", "name": "str_weather_geo", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "structured\\str_weather_geo.sql", "original_file_path": "models\\structured\\str_weather_geo.sql", "unique_id": "model.villo_cjaminon_team2.str_weather_geo", "fqn": ["villo_cjaminon_team2", "structured", "str_weather_geo"], "alias": "str_weather_geo", "checksum": {"name": "sha256", "checksum": "4fbc5c46177feb799b5ab711b487c4daf7c95fd7c628fbdc868818b346c3a937"}, "config": {"enabled": true, "alias": null, "schema": "STR", "database": null, "tags": ["villo", "str"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "sort": "timestamp", "post-hook": [], "pre-hook": []}, "tags": ["villo", "str"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "STR", "transient": false, "tags": ["villo", "str"], "enabled": true, "materialized": "incremental", "sort": "timestamp"}, "created_at": 1688129737.7879791, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_geo", "raw_code": "{{\n    config(\n        materialized='incremental',\n        sort='timestamp'\n    )\n}}\n\n\nselect\n    *,\n    st_makepoint(longitude, latitude) as geopoint\nfrom {{ ref('raw_weather_1') }}\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [{"name": "raw_weather_1", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.villo_cjaminon_team2.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\str_weather_geo.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    *,\n    st_makepoint(longitude, latitude) as geopoint\nfrom OPENMETA_CJAMINON_TEAM2.PUBLIC_RAW.raw_weather_1\n\n\n\n  -- this filter will only be applied on an incremental run\n  where timestamp > (select max(timestamp) from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_geo)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_FILENAME.ec41220f81": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FILENAME", "model": "{{ get_where_subquery(source('source_data', 'raw_villo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_FILENAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_FILENAME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_FILENAME.ec41220f81", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_FILENAME"], "alias": "source_not_null_source_data_raw_villo_FILENAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9179795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_FILENAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FILENAME\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo\nwhere FILENAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FILENAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_TIMESTAMP.4c1543ad14": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('source_data', 'raw_villo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_TIMESTAMP.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_TIMESTAMP.4c1543ad14", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_TIMESTAMP"], "alias": "source_not_null_source_data_raw_villo_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9199798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_DATA.e3a0ee1bf3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(source('source_data', 'raw_villo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_DATA", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_DATA.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_DATA.e3a0ee1bf3", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_DATA"], "alias": "source_not_null_source_data_raw_villo_DATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.92198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_DATA.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DATA\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "DATA", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_unique_source_data_raw_weather_FILENAME.f6bf124fff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "FILENAME", "model": "{{ get_where_subquery(source('source_data', 'raw_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_unique_source_data_raw_weather_FILENAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_unique_source_data_raw_weather_FILENAME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_unique_source_data_raw_weather_FILENAME.f6bf124fff", "fqn": ["villo_cjaminon_team2", "raw", "source_unique_source_data_raw_weather_FILENAME"], "alias": "source_unique_source_data_raw_weather_FILENAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9239805, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_unique_source_data_raw_weather_FILENAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FILENAME as unique_field,\n    count(*) as n_records\n\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather\nwhere FILENAME is not null\ngroup by FILENAME\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FILENAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_FILENAME.64d00c44b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FILENAME", "model": "{{ get_where_subquery(source('source_data', 'raw_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_FILENAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_FILENAME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_FILENAME.64d00c44b7", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_FILENAME"], "alias": "source_not_null_source_data_raw_weather_FILENAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9259803, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_FILENAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FILENAME\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather\nwhere FILENAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FILENAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_TIMESTAMP.6278746a73": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('source_data', 'raw_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_TIMESTAMP.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_TIMESTAMP.6278746a73", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_TIMESTAMP"], "alias": "source_not_null_source_data_raw_weather_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9279797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_DATA.ec2efcdd95": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(source('source_data', 'raw_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_DATA", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_DATA.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_DATA.ec2efcdd95", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_DATA"], "alias": "source_not_null_source_data_raw_weather_DATA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9299805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_DATA.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DATA\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "DATA", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_UID.8cb4382565": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UID", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_UID", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_UID.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_UID.8cb4382565", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_UID"], "alias": "source_not_null_source_data_raw_villo_1_UID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9319806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_UID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UID\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere UID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UID", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_TIMESTAMP.edaa90475e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_TIMESTAMP.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_TIMESTAMP.edaa90475e", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_TIMESTAMP"], "alias": "source_not_null_source_data_raw_villo_1_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9339802, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_ADDRESS.50ea711335": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_ADDRESS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_ADDRESS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_ADDRESS.50ea711335", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_ADDRESS"], "alias": "source_not_null_source_data_raw_villo_1_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.93498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.7dba722bec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKE_STANDS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.7dba722bec", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS"], "alias": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9369798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere AVAILABLE_BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKE_STANDS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.f5619dadf6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKES", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.f5619dadf6", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES"], "alias": "source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9389799, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKES\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere AVAILABLE_BIKES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKES", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BANKING.c0dd682ac1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BANKING", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_BANKING", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_BANKING.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BANKING.c0dd682ac1", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_BANKING"], "alias": "source_not_null_source_data_raw_villo_1_BANKING", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9409795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_BANKING.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BANKING\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere BANKING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE.ffaac3a045": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BANKING", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE.ffaac3a045", "fqn": ["villo_cjaminon_team2", "raw", "source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE"], "alias": "source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef"}, "created_at": 1688129737.9429796, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef\") }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_accepted_values_source__995e68d5bcab2402cfdfbe0d0b7e77ef.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BANKING as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\n    group by BANKING\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BIKE_STANDS.f98e46388f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BIKE_STANDS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_BIKE_STANDS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BIKE_STANDS.f98e46388f", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_BIKE_STANDS"], "alias": "source_not_null_source_data_raw_villo_1_BIKE_STANDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9489803, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_BIKE_STANDS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BIKE_STANDS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BONUS.8546fa955b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONUS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_BONUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_BONUS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BONUS.8546fa955b", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_BONUS"], "alias": "source_not_null_source_data_raw_villo_1_BONUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9499793, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_BONUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BONUS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere BONUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE.3e8b4856c7": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BONUS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE.3e8b4856c7", "fqn": ["villo_cjaminon_team2", "raw", "source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE"], "alias": "source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc"}, "created_at": 1688129737.9529803, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc\") }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_accepted_values_source__ad90035f877204f6db8a9ffd761cdfcc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BONUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\n    group by BONUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_CONTRACT_NAME.c6f905bd4d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_CONTRACT_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_CONTRACT_NAME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_CONTRACT_NAME.c6f905bd4d", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_CONTRACT_NAME"], "alias": "source_not_null_source_data_raw_villo_1_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9579804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_CONTRACT_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTRACT_NAME\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere CONTRACT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTRACT_NAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE.8b21332ee7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_LAST_UPDATE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_LAST_UPDATE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE.8b21332ee7", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_LAST_UPDATE"], "alias": "source_not_null_source_data_raw_villo_1_LAST_UPDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9599798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_LAST_UPDATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere LAST_UPDATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.10ab87af7f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE_TS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.10ab87af7f", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS"], "alias": "source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9623327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE_TS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere LAST_UPDATE_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE_TS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NAME.e115fe51cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_NAME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NAME.e115fe51cf", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_NAME"], "alias": "source_not_null_source_data_raw_villo_1_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9633327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NAME\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NUMBER.283fbf7179": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_NUMBER", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_NUMBER.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NUMBER.283fbf7179", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_NUMBER"], "alias": "source_not_null_source_data_raw_villo_1_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9653325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NUMBER\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NUMBER", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAT.7ff6e35f9e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAT", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_LAT", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_LAT.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAT.7ff6e35f9e", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_LAT"], "alias": "source_not_null_source_data_raw_villo_1_LAT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9673333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_LAT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAT\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere LAT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAT", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LONG.98b20498e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LONG", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_LONG", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_LONG.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LONG.98b20498e4", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_LONG"], "alias": "source_not_null_source_data_raw_villo_1_LONG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9693344, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_LONG.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LONG\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere LONG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LONG", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_STATUS.aeaed074f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_villo_1_STATUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_villo_1_STATUS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_STATUS.aeaed074f3", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_villo_1_STATUS"], "alias": "source_not_null_source_data_raw_villo_1_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9723327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_villo_1_STATUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATUS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED.4643176138": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["OPEN", "CLOSED"], "column_name": "STATUS", "model": "{{ get_where_subquery(source('source_data', 'raw_villo_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED.4643176138", "fqn": ["villo_cjaminon_team2", "raw", "source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED"], "alias": "source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447"}, "created_at": 1688129737.9743326, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447\") }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_villo_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_villo_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_accepted_values_source__6f7ec088095ed95f67615785cdd9f447.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        STATUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public.raw_villo_1\n    group by STATUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'OPEN','CLOSED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME.2ec93bd825": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_RECORDING_TIME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_RECORDING_TIME.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME.2ec93bd825", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_RECORDING_TIME"], "alias": "source_not_null_source_data_raw_weather_1_RECORDING_TIME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.979334, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_RECORDING_TIME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere RECORDING_TIME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.623d7d0668": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME_TS", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.623d7d0668", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS"], "alias": "source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9813328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME_TS\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere RECORDING_TIME_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME_TS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_PRESSURE.dbb3a329d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRESSURE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_PRESSURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_PRESSURE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_PRESSURE.dbb3a329d1", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_PRESSURE"], "alias": "source_not_null_source_data_raw_weather_1_PRESSURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.983333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_PRESSURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PRESSURE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere PRESSURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRESSURE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_HUMIDITY.ef910b5bd1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HUMIDITY", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_HUMIDITY", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_HUMIDITY.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_HUMIDITY.ef910b5bd1", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_HUMIDITY"], "alias": "source_not_null_source_data_raw_weather_1_HUMIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.985334, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_HUMIDITY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HUMIDITY\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere HUMIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HUMIDITY", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TEMPERATURE.871a7d5e59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEMPERATURE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_TEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_TEMPERATURE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TEMPERATURE.871a7d5e59", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_TEMPERATURE"], "alias": "source_not_null_source_data_raw_weather_1_TEMPERATURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.987333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_TEMPERATURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere TEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TEMPERATURE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.5407b8fcb8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "APPARENTTEMPERATURE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.5407b8fcb8", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE"], "alias": "source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.9893339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect APPARENTTEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere APPARENTTEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "APPARENTTEMPERATURE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_WEATHER_TYPE.02e44988e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_WEATHER_TYPE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_WEATHER_TYPE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_WEATHER_TYPE.02e44988e0", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_WEATHER_TYPE"], "alias": "source_not_null_source_data_raw_weather_1_WEATHER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129737.991333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_WEATHER_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect WEATHER_TYPE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere WEATHER_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.c23f67773a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["partly-cloudy-night", "cloudy", "clear-night", "clear-day", "partly-cloudy-day", "rain", "wind", "fog", "snow"], "column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.c23f67773a", "fqn": ["villo_cjaminon_team2", "raw", "source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow"], "alias": "source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e"}, "created_at": 1688129737.9933355, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e\") }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_accepted_values_source__fd0df5ae4e39aedc71c59b4d763ba33e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        WEATHER_TYPE as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\n    group by WEATHER_TYPE\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'partly-cloudy-night','cloudy','clear-night','clear-day','partly-cloudy-day','rain','wind','fog','snow'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LATITUDE.77e2cd569d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LATITUDE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_LATITUDE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_LATITUDE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LATITUDE.77e2cd569d", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_LATITUDE"], "alias": "source_not_null_source_data_raw_weather_1_LATITUDE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.000333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_LATITUDE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LATITUDE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere LATITUDE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LATITUDE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LONGITUDE.142297a71f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LONGITUDE", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_LONGITUDE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_LONGITUDE.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LONGITUDE.142297a71f", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_LONGITUDE"], "alias": "source_not_null_source_data_raw_weather_1_LONGITUDE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0023324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_LONGITUDE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LONGITUDE\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere LONGITUDE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LONGITUDE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TIMESTAMP.ed10c6c397": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('source_data', 'raw_weather_1')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_raw_weather_1_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_raw_weather_1_TIMESTAMP.sql", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TIMESTAMP.ed10c6c397", "fqn": ["villo_cjaminon_team2", "raw", "source_not_null_source_data_raw_weather_1_TIMESTAMP"], "alias": "source_not_null_source_data_raw_weather_1_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0033324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "raw_weather_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.raw_weather_1"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\raw\\src_raw.yml\\source_not_null_source_data_raw_weather_1_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public.raw_weather_1\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_UID.319b840cd7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UID", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_UID", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_UID.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_UID.319b840cd7", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_UID"], "alias": "source_not_null_reference_data_str_villo_communes_geo_UID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0063326, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_UID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UID\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere UID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UID", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.a653bcc217": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.a653bcc217", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP"], "alias": "source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0073326, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADDRESS.1be2181190": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_ADDRESS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_ADDRESS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADDRESS.1be2181190", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_ADDRESS"], "alias": "source_not_null_reference_data_str_villo_communes_geo_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0093348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS.85578eabda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKE_STANDS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS.85578eabda", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS"], "alias": "source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea"}, "created_at": 1688129738.0113325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_a33a4d48aa1157fd914650e4d0151bea.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere AVAILABLE_BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKE_STANDS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES.5a621b7282": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKES", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES.5a621b7282", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES"], "alias": "source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a"}, "created_at": 1688129738.0133343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_0371f88f6939842761c88585f53a6c6a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKES\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere AVAILABLE_BIKES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKES", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BANKING.c573ec7b58": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BANKING", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_BANKING", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_BANKING.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BANKING.c573ec7b58", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_BANKING"], "alias": "source_not_null_reference_data_str_villo_communes_geo_BANKING", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.015333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_BANKING.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BANKING\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere BANKING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE.2badefa14f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BANKING", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_fb240118d842425f2de463dee6360b55.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE.2badefa14f", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE"], "alias": "source_accepted_values_referen_fb240118d842425f2de463dee6360b55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_fb240118d842425f2de463dee6360b55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_fb240118d842425f2de463dee6360b55"}, "created_at": 1688129738.0173326, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_fb240118d842425f2de463dee6360b55\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_fb240118d842425f2de463dee6360b55.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BANKING as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\n    group by BANKING\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS.a423b8a8da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BIKE_STANDS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_ff0d4ea788df1933688370c65181b277.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS.a423b8a8da", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS"], "alias": "source_not_null_reference_data_ff0d4ea788df1933688370c65181b277", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_ff0d4ea788df1933688370c65181b277", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_ff0d4ea788df1933688370c65181b277"}, "created_at": 1688129738.0223336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_ff0d4ea788df1933688370c65181b277\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_ff0d4ea788df1933688370c65181b277.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BIKE_STANDS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BONUS.725eb93075": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_BONUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_BONUS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BONUS.725eb93075", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_BONUS"], "alias": "source_not_null_reference_data_str_villo_communes_geo_BONUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.02461, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_BONUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BONUS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere BONUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE.43c7f5d44d": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BONUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE.43c7f5d44d", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE"], "alias": "source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9"}, "created_at": 1688129738.0266216, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_4e0e3f6500676a551bcdd3a13b359dc9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BONUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\n    group by BONUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME.4bed1f7211": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME.4bed1f7211", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME"], "alias": "source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc"}, "created_at": 1688129738.0316238, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_7d1db57fe6d626c5a1c6f8b2107060cc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTRACT_NAME\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere CONTRACT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTRACT_NAME", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE.068dda36c3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_dee383261b22b338454cce382d9f42f0.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE.068dda36c3", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE"], "alias": "source_not_null_reference_data_dee383261b22b338454cce382d9f42f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_dee383261b22b338454cce382d9f42f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_dee383261b22b338454cce382d9f42f0"}, "created_at": 1688129738.033622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_dee383261b22b338454cce382d9f42f0\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_dee383261b22b338454cce382d9f42f0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere LAST_UPDATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS.c0444e2254": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE_TS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS.c0444e2254", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS"], "alias": "source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f"}, "created_at": 1688129738.0356214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_5cbff022cd74563459f0efa3aa9f9e0f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE_TS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere LAST_UPDATE_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE_TS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NAME.1320330e2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_NAME.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NAME.1320330e2d", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_NAME"], "alias": "source_not_null_reference_data_str_villo_communes_geo_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0376215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NAME\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NAME", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NUMBER.156e141111": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_NUMBER", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_NUMBER.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NUMBER.156e141111", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_NUMBER"], "alias": "source_not_null_reference_data_str_villo_communes_geo_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0396218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NUMBER\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NUMBER", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_STATUS.29585e485f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_STATUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_STATUS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_STATUS.29585e485f", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_STATUS"], "alias": "source_not_null_reference_data_str_villo_communes_geo_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0416226, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_STATUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATUS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED.882177b98d": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["OPEN", "CLOSED"], "column_name": "STATUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_defbecea31aacf145a1a4016240988ed.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED.882177b98d", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED"], "alias": "source_accepted_values_referen_defbecea31aacf145a1a4016240988ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_defbecea31aacf145a1a4016240988ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_defbecea31aacf145a1a4016240988ed"}, "created_at": 1688129738.0436215, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_defbecea31aacf145a1a4016240988ed\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_defbecea31aacf145a1a4016240988ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        STATUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\n    group by STATUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'OPEN','CLOSED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.44cbeec308": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADMUNAFR", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.44cbeec308", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR"], "alias": "source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0486226, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADMUNAFR\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere ADMUNAFR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADMUNAFR", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_COMMUNES.33d6d9ac58": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMMUNES", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_COMMUNES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_COMMUNES.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_COMMUNES.33d6d9ac58", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_COMMUNES"], "alias": "source_not_null_reference_data_str_villo_communes_geo_COMMUNES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.050622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_COMMUNES.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COMMUNES\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere COMMUNES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COMMUNES", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CODE_INS.43827eb8a0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CODE_INS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_CODE_INS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_CODE_INS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CODE_INS.43827eb8a0", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_CODE_INS"], "alias": "source_not_null_reference_data_str_villo_communes_geo_CODE_INS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.052622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_CODE_INS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CODE_INS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere CODE_INS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CODE_INS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ARROND.8bff71c14e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ARROND", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_communes_geo_ARROND", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_communes_geo_ARROND.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ARROND.8bff71c14e", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_communes_geo_ARROND"], "alias": "source_not_null_reference_data_str_villo_communes_geo_ARROND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0556216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_communes_geo_ARROND.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ARROND\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo\nwhere ARROND is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ARROND", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_UID.321342b8cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UID", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_UID", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_UID.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_UID.321342b8cc", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_UID"], "alias": "source_not_null_reference_data_str_villo_geo_UID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.057622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_UID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UID\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere UID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UID", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_TIMESTAMP.b9967cf240": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_TIMESTAMP.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_TIMESTAMP.b9967cf240", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_TIMESTAMP"], "alias": "source_not_null_reference_data_str_villo_geo_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.059624, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_ADDRESS.639cf923b8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_ADDRESS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_ADDRESS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_ADDRESS.639cf923b8", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_ADDRESS"], "alias": "source_not_null_reference_data_str_villo_geo_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.061622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS.d47b955486": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKE_STANDS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS.d47b955486", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS"], "alias": "source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072"}, "created_at": 1688129738.063622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_fc434b766ca466b9e3ca4c6def2ce072.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere AVAILABLE_BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKE_STANDS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.11ee69ba97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVAILABLE_BIKES", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.11ee69ba97", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES"], "alias": "source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0656226, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVAILABLE_BIKES\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere AVAILABLE_BIKES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVAILABLE_BIKES", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BANKING.5c7f0702a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BANKING", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_BANKING", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_BANKING.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BANKING.5c7f0702a9", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_BANKING"], "alias": "source_not_null_reference_data_str_villo_geo_BANKING", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0676215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_BANKING.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BANKING\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere BANKING is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE.8cb35c77d2": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BANKING", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE.8cb35c77d2", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE"], "alias": "source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236"}, "created_at": 1688129738.0696223, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_6ef0b028dace9745cb32052e99a03236.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BANKING as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\n    group by BANKING\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BANKING", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BIKE_STANDS.a9234ace67": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BIKE_STANDS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_BIKE_STANDS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BIKE_STANDS.a9234ace67", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_BIKE_STANDS"], "alias": "source_not_null_reference_data_str_villo_geo_BIKE_STANDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0756216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_BIKE_STANDS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BIKE_STANDS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BONUS.0779352f3a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_BONUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_BONUS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BONUS.0779352f3a", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_BONUS"], "alias": "source_not_null_reference_data_str_villo_geo_BONUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.077622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_BONUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BONUS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere BONUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE.b47ea69aa6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["TRUE", "FALSE"], "column_name": "BONUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_c2a3595a031dd9661bbc903303755202.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE.b47ea69aa6", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE"], "alias": "source_accepted_values_referen_c2a3595a031dd9661bbc903303755202", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_c2a3595a031dd9661bbc903303755202", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_c2a3595a031dd9661bbc903303755202"}, "created_at": 1688129738.0786216, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_c2a3595a031dd9661bbc903303755202\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_c2a3595a031dd9661bbc903303755202.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BONUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\n    group by BONUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'TRUE','FALSE'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BONUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.651f051cc7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_NAME", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_CONTRACT_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.651f051cc7", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_CONTRACT_NAME"], "alias": "source_not_null_reference_data_str_villo_geo_CONTRACT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0846221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTRACT_NAME\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere CONTRACT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTRACT_NAME", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE.0504fffe6e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE.0504fffe6e", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_LAST_UPDATE"], "alias": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0866218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_LAST_UPDATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere LAST_UPDATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.336c0c1727": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_UPDATE_TS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.336c0c1727", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS"], "alias": "source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0886223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAST_UPDATE_TS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere LAST_UPDATE_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAST_UPDATE_TS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NAME.7202e6069a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_NAME.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NAME.7202e6069a", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_NAME"], "alias": "source_not_null_reference_data_str_villo_geo_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.090623, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NAME\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NAME", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NUMBER.e3a20bb654": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NUMBER", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_NUMBER", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_NUMBER.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NUMBER.e3a20bb654", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_NUMBER"], "alias": "source_not_null_reference_data_str_villo_geo_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.092622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NUMBER\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NUMBER", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAT.2a1095f2f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAT", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_LAT", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_LAT.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAT.2a1095f2f5", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_LAT"], "alias": "source_not_null_reference_data_str_villo_geo_LAT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0946221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_LAT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LAT\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere LAT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LAT", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LONG.23b57164bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LONG", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_LONG", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_LONG.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LONG.23b57164bf", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_LONG"], "alias": "source_not_null_reference_data_str_villo_geo_LONG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.0956233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_LONG.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LONG\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere LONG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LONG", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_STATUS.43405aa6da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_STATUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_STATUS.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_STATUS.43405aa6da", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_STATUS"], "alias": "source_not_null_reference_data_str_villo_geo_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.097622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_STATUS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATUS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED.ccfea4b682": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["OPEN", "CLOSED"], "column_name": "STATUS", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED.ccfea4b682", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED"], "alias": "source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff"}, "created_at": 1688129738.0996227, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_96c3f030413f1cb8a8444ee3b151a3ff.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        STATUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\n    group by STATUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'OPEN','CLOSED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATUS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_GEOPOINT.b95e6c0ad6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GEOPOINT", "model": "{{ get_where_subquery(source('reference_data', 'str_villo_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_villo_geo_GEOPOINT", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_villo_geo_GEOPOINT.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_GEOPOINT.b95e6c0ad6", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_villo_geo_GEOPOINT"], "alias": "source_not_null_reference_data_str_villo_geo_GEOPOINT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.104623, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_villo_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_villo_geo_GEOPOINT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect GEOPOINT\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo\nwhere GEOPOINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "GEOPOINT", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS.33a3608809": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME_TS", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS.33a3608809", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS"], "alias": "source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091"}, "created_at": 1688129738.1076243, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_883ff6eee0eb5833b57d17b738c6a091.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME_TS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere RECORDING_TIME_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME_TS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_PRESSURE.f38c911b11": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRESSURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_PRESSURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_PRESSURE.f38c911b11", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_PRESSURE"], "alias": "source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72"}, "created_at": 1688129738.1106224, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_531d494a31b54fdd5a61a0e23931ea72.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PRESSURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere PRESSURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRESSURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_HUMIDITY.060125a85d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HUMIDITY", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_HUMIDITY", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_HUMIDITY.060125a85d", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_HUMIDITY"], "alias": "source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d"}, "created_at": 1688129738.1126225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_c138e6214d2ca1e7b2dc5d51230f334d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HUMIDITY\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere HUMIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HUMIDITY", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE.a9bd7ca496": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEMPERATURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE.a9bd7ca496", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE"], "alias": "source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed"}, "created_at": 1688129738.1146228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_f958f8d96ab6d0cd6e5c1fdaf2c199ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere TEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TEMPERATURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE.2e9d5d0eb4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "APPARENTTEMPERATURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_212c28dc8322436323fb25b68723f42d.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE.2e9d5d0eb4", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE"], "alias": "source_not_null_reference_data_212c28dc8322436323fb25b68723f42d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_212c28dc8322436323fb25b68723f42d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_212c28dc8322436323fb25b68723f42d"}, "created_at": 1688129738.1166227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_212c28dc8322436323fb25b68723f42d\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_212c28dc8322436323fb25b68723f42d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect APPARENTTEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere APPARENTTEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "APPARENTTEMPERATURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE.09f51e70f6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE.09f51e70f6", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE"], "alias": "source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444"}, "created_at": 1688129738.1186228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_fb3c4cd127deb7919d2e0ae73bb8e444.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect WEATHER_TYPE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere WEATHER_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.b7993cb3b3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["partly-cloudy-night", "cloudy", "clear-night", "clear-day", "partly-cloudy-day", "rain", "wind", "fog", "snow"], "column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.b7993cb3b3", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow"], "alias": "source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0"}, "created_at": 1688129738.1206245, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_8159031f7f68d817213797f9e8a3c4b0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        WEATHER_TYPE as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\n    group by WEATHER_TYPE\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'partly-cloudy-night','cloudy','clear-night','clear-day','partly-cloudy-day','rain','wind','fog','snow'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR.118662c73d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADMUNAFR", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR.118662c73d", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR"], "alias": "source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c"}, "created_at": 1688129738.128623, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_01e55905407a327abc5ccd32369fa17c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADMUNAFR\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere ADMUNAFR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADMUNAFR", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_COMMUNES.2b0c6a8fd0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMMUNES", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_COMMUNES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_COMMUNES.2b0c6a8fd0", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_COMMUNES"], "alias": "source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2"}, "created_at": 1688129738.130622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_bf1d2e1d8de6cdfe0632ab8c30e00aa2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COMMUNES\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere COMMUNES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COMMUNES", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_CODE_INS.f15d75bc0f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CODE_INS", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_CODE_INS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_CODE_INS.f15d75bc0f", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_CODE_INS"], "alias": "source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2"}, "created_at": 1688129738.1316216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_261b4a7d7cd554042c050479b67765e2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CODE_INS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere CODE_INS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CODE_INS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ARROND.5a66f3d105": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ARROND", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_communes_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_communes_geo_ARROND", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_communes_geo_ARROND.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ARROND.5a66f3d105", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_communes_geo_ARROND"], "alias": "source_not_null_reference_data_str_weather_communes_geo_ARROND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.133622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_communes_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_communes_geo_ARROND.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ARROND\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo\nwhere ARROND is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ARROND", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME.9ec1c10c43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_RECORDING_TIME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_RECORDING_TIME.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME.9ec1c10c43", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_RECORDING_TIME"], "alias": "source_not_null_reference_data_str_weather_geo_RECORDING_TIME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1366222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_RECORDING_TIME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere RECORDING_TIME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS.bfac7fa1fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME_TS", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS.bfac7fa1fe", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS"], "alias": "source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592"}, "created_at": 1688129738.1386225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_0f6fad88a3cccd50097b86f5511d9592.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME_TS\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere RECORDING_TIME_TS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME_TS", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_PRESSURE.1702df875e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRESSURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_PRESSURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_PRESSURE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_PRESSURE.1702df875e", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_PRESSURE"], "alias": "source_not_null_reference_data_str_weather_geo_PRESSURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1406224, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_PRESSURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PRESSURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere PRESSURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRESSURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_HUMIDITY.535f21e04b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HUMIDITY", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_HUMIDITY", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_HUMIDITY.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_HUMIDITY.535f21e04b", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_HUMIDITY"], "alias": "source_not_null_reference_data_str_weather_geo_HUMIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1426227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_HUMIDITY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HUMIDITY\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere HUMIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HUMIDITY", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TEMPERATURE.e392694875": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEMPERATURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_TEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_TEMPERATURE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TEMPERATURE.e392694875", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_TEMPERATURE"], "alias": "source_not_null_reference_data_str_weather_geo_TEMPERATURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1446226, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_TEMPERATURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere TEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TEMPERATURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE.8b8b8051ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "APPARENTTEMPERATURE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE.8b8b8051ab", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE"], "alias": "source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df"}, "created_at": 1688129738.1456215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_139119fe02a84dea9e39b743c4e121df.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect APPARENTTEMPERATURE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere APPARENTTEMPERATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "APPARENTTEMPERATURE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.8a6b5bd820": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_WEATHER_TYPE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.8a6b5bd820", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_WEATHER_TYPE"], "alias": "source_not_null_reference_data_str_weather_geo_WEATHER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1476223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect WEATHER_TYPE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere WEATHER_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.68be29403c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["partly-cloudy-night", "cloudy", "clear-night", "clear-day", "partly-cloudy-day", "rain", "wind", "fog", "snow"], "column_name": "WEATHER_TYPE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.68be29403c", "fqn": ["villo_cjaminon_team2", "structured", "source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow"], "alias": "source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932"}, "created_at": 1688129738.1496222, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932\") }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_accepted_values_referen_b01c1737cd04934c10d4bda4e6cff932.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        WEATHER_TYPE as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\n    group by WEATHER_TYPE\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'partly-cloudy-night','cloudy','clear-night','clear-day','partly-cloudy-day','rain','wind','fog','snow'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "WEATHER_TYPE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LATITUDE.18a280935c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LATITUDE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_LATITUDE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_LATITUDE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LATITUDE.18a280935c", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_LATITUDE"], "alias": "source_not_null_reference_data_str_weather_geo_LATITUDE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1576223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_LATITUDE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LATITUDE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere LATITUDE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LATITUDE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LONGITUDE.4f6f2ba3b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LONGITUDE", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_LONGITUDE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_LONGITUDE.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LONGITUDE.4f6f2ba3b0", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_LONGITUDE"], "alias": "source_not_null_reference_data_str_weather_geo_LONGITUDE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1596248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_LONGITUDE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LONGITUDE\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere LONGITUDE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LONGITUDE", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TIMESTAMP.cf434902de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_TIMESTAMP", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_TIMESTAMP.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TIMESTAMP.cf434902de", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_TIMESTAMP"], "alias": "source_not_null_reference_data_str_weather_geo_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.1616218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TIMESTAMP\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_GEOPOINT.0470ed5ac9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GEOPOINT", "model": "{{ get_where_subquery(source('reference_data', 'str_weather_geo')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_reference_data_str_weather_geo_GEOPOINT", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_reference_data_str_weather_geo_GEOPOINT.sql", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_GEOPOINT.0470ed5ac9", "fqn": ["villo_cjaminon_team2", "structured", "source_not_null_reference_data_str_weather_geo_GEOPOINT"], "alias": "source_not_null_reference_data_str_weather_geo_GEOPOINT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688129738.162622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["reference_data", "str_weather_geo"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\structured\\src_str.yml\\source_not_null_reference_data_str_weather_geo_GEOPOINT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect GEOPOINT\nfrom OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo\nwhere GEOPOINT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "GEOPOINT", "file_key_name": "sources.reference_data", "attached_node": null}, "test.villo_cjaminon_team2.source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME.d2232f76be": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "RECORDING_TIME_HR || '-' || STATION_NAME", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME.d2232f76be", "fqn": ["villo_cjaminon_team2", "analytics", "source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME"], "alias": "source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3"}, "created_at": 1688130235.253269, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_unique_source_data_anal_9f4d60c96a09541c4410df0048af53c3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    RECORDING_TIME_HR || '-' || STATION_NAME as unique_field,\n    count(*) as n_records\n\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere RECORDING_TIME_HR || '-' || STATION_NAME is not null\ngroup by RECORDING_TIME_HR || '-' || STATION_NAME\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE.165fe39d81": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_COMMUNE", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE.165fe39d81", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE"], "alias": "source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5"}, "created_at": 1688130235.2642937, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_5812562c35fff1f382413b9b4eff86e5.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_COMMUNE\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere STATION_COMMUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_COMMUNE", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_CODE_INS.c57c9213f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CODE_INS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_CODE_INS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_analytics_stand_weather_CODE_INS.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_CODE_INS.c57c9213f5", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_CODE_INS"], "alias": "source_not_null_source_data_analytics_stand_weather_CODE_INS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688130235.2662961, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_analytics_stand_weather_CODE_INS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CODE_INS\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere CODE_INS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CODE_INS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_NAME.fc298a0bb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_NAME", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_STATION_NAME", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_NAME.fc298a0bb7", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_STATION_NAME"], "alias": "source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2"}, "created_at": 1688130235.2682705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_47985456f5c12c058f8d7b06e04ebbc2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_NAME\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere STATION_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_NAME", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_STATUS.b342ff0348": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_STATUS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_STATION_STATUS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_STATUS.b342ff0348", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_STATION_STATUS"], "alias": "source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653"}, "created_at": 1688130235.270296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_c0a92f99a310eadd908b2a95d427c653.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_STATUS\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere STATION_STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_STATUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED.c91a81b281": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["OPEN", "CLOSED"], "column_name": "STATION_STATUS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED.c91a81b281", "fqn": ["villo_cjaminon_team2", "analytics", "source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED"], "alias": "source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d"}, "created_at": 1688130235.2722983, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_accepted_values_source__a20e9158f6f0878d5006811f85b6c74d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        STATION_STATUS as value_field,\n        count(*) as n_records\n\n    from OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\n    group by STATION_STATUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'OPEN','CLOSED'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_STATUS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS.bf5e050512": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_ADDRESS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS.bf5e050512", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS"], "alias": "source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9"}, "created_at": 1688130235.2842996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_7c0681f4abaf4755edd35ca47e5aefc9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_ADDRESS\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere STATION_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_ADDRESS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR.8d95c09093": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDING_TIME_HR", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR.8d95c09093", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR"], "alias": "source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8"}, "created_at": 1688130235.286268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_904ba77add4879bcd65f4f701c82b3b8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect RECORDING_TIME_HR\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere RECORDING_TIME_HR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "RECORDING_TIME_HR", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES.d98a39ac07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_AVAILABLE_BIKES", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_ea849612f42598b929da98c3023a1625.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES.d98a39ac07", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES"], "alias": "source_not_null_source_data_an_ea849612f42598b929da98c3023a1625", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_ea849612f42598b929da98c3023a1625", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_ea849612f42598b929da98c3023a1625"}, "created_at": 1688130235.2882853, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_ea849612f42598b929da98c3023a1625\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_ea849612f42598b929da98c3023a1625.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_AVAILABLE_BIKES\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere AVERAGE_AVAILABLE_BIKES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVERAGE_AVAILABLE_BIKES", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS.cbd9df0b5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_BROKEN_STANDS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS.cbd9df0b5d", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS"], "alias": "source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e"}, "created_at": 1688130235.289273, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_5a20f9f416cc85afaba2dfa60633057e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_BROKEN_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere AVERAGE_BROKEN_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVERAGE_BROKEN_STANDS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS.c8e2d25fb3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_AVAILABLE_BIKE_STANDS", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS.c8e2d25fb3", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS"], "alias": "source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff"}, "created_at": 1688130235.2912781, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_849f7a317587e801a42deb789f10ccff.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_AVAILABLE_BIKE_STANDS\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere AVERAGE_AVAILABLE_BIKE_STANDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "AVERAGE_AVAILABLE_BIKE_STANDS", "file_key_name": "sources.source_data", "attached_node": null}, "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY.7753aba920": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATION_CAPACITY", "model": "{{ get_where_subquery(source('source_data', 'analytics_stand_weather')) }}"}, "namespace": null}, "database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC_dbt_test__audit", "name": "source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY", "resource_type": "test", "package_name": "villo_cjaminon_team2", "path": "source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a.sql", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY.7753aba920", "fqn": ["villo_cjaminon_team2", "analytics", "source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY"], "alias": "source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a"}, "created_at": 1688130235.2932684, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a\") }}", "language": "sql", "refs": [], "sources": [["source_data", "analytics_stand_weather"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\analytics\\src_analytics.yml\\source_not_null_source_data_an_cf9174fbb7a5ebbe730e148bd687824a.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect STATION_CAPACITY\nfrom OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather\nwhere STATION_CAPACITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "STATION_CAPACITY", "file_key_name": "sources.source_data", "attached_node": null}, "model.villo_cjaminon_team2.lat_lon_validity": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC", "name": "lat_lon_validity", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "tests\\generic\\lat_lon_validity.sql", "original_file_path": "models\\tests\\generic\\lat_lon_validity.sql", "unique_id": "model.villo_cjaminon_team2.lat_lon_validity", "fqn": ["villo_cjaminon_team2", "tests", "generic", "lat_lon_validity"], "alias": "lat_lon_validity", "checksum": {"name": "sha256", "checksum": "6af18f5409268d23f284d03d2318801497533275bd85171304bbd3f83a66ba17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688132471.544963, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC.lat_lon_validity", "raw_code": "SELECT lat, long\r\nFROM {{ ref('str_villo_geo' )}}\r\nHAVING long >= lat", "language": "sql", "refs": [{"name": "str_villo_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.str_villo_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\tests\\generic\\lat_lon_validity.sql", "compiled": true, "compiled_code": "SELECT lat, long\nFROM OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_villo_geo\nHAVING long >= lat", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.villo_cjaminon_team2.toohot": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "PUBLIC", "name": "toohot", "resource_type": "model", "package_name": "villo_cjaminon_team2", "path": "tests\\generic\\toohot.sql", "original_file_path": "models\\tests\\generic\\toohot.sql", "unique_id": "model.villo_cjaminon_team2.toohot", "fqn": ["villo_cjaminon_team2", "tests", "generic", "toohot"], "alias": "toohot", "checksum": {"name": "sha256", "checksum": "0c83bed195732ad9a99f191f294870cce67dd4af065ed5dab437c60e53f95255"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "severity": "warn", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1688132837.643886, "relation_name": "OPENMETA_CJAMINON_TEAM2.PUBLIC.toohot", "raw_code": "{{ config(severity = 'warn') }}\n\n    select *\n    from {{ref('str_weather_geo')}}\n    where (temperature > 60)", "language": "sql", "refs": [{"name": "str_weather_geo", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.villo_cjaminon_team2.str_weather_geo"]}, "compiled_path": "target\\compiled\\villo_cjaminon_team2\\models\\tests\\generic\\toohot.sql", "compiled": true, "compiled_code": "\n\n    select *\n    from OPENMETA_CJAMINON_TEAM2.PUBLIC_STR.str_weather_geo\n    where (temperature > 60)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.villo_cjaminon_team2.source_data.raw_villo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public", "name": "raw_villo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\raw\\src_raw.yml", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "source.villo_cjaminon_team2.source_data.raw_villo", "fqn": ["villo_cjaminon_team2", "raw", "source_data", "raw_villo"], "source_name": "source_data", "source_description": "source data where the villo data arrives in real time coming from a snowpipe", "loader": "", "identifier": "raw_villo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "villo bike sharing data", "columns": {"FILENAME": {"name": "FILENAME", "description": "name of the parquet file from azure storage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "timestamp when files is loaded in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "data in raw format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public.raw_villo", "created_at": 1688129737.9229796}, "source.villo_cjaminon_team2.source_data.raw_weather": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public", "name": "raw_weather", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\raw\\src_raw.yml", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "source.villo_cjaminon_team2.source_data.raw_weather", "fqn": ["villo_cjaminon_team2", "raw", "source_data", "raw_weather"], "source_name": "source_data", "source_description": "source data where the villo data arrives in real time coming from a snowpipe", "loader": "", "identifier": "raw_weather", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Brussels weather layered json.", "columns": {"FILENAME": {"name": "FILENAME", "description": "name of the parquet file from azure storage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "timestamp when files is loaded in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "data in raw format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public.raw_weather", "created_at": 1688129737.9309795}, "source.villo_cjaminon_team2.source_data.raw_villo_1": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public", "name": "raw_villo_1", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\raw\\src_raw.yml", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "source.villo_cjaminon_team2.source_data.raw_villo_1", "fqn": ["villo_cjaminon_team2", "raw", "source_data", "raw_villo_1"], "source_name": "source_data", "source_description": "source data where the villo data arrives in real time coming from a snowpipe", "loader": "", "identifier": "raw_villo_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "villo bike data flattened", "columns": {"UID": {"name": "UID", "description": "unique identifier (number + lastupdate)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "timestamp when files is loaded in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "address of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKE_STANDS": {"name": "AVAILABLE_BIKE_STANDS", "description": "number of available bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKES": {"name": "AVAILABLE_BIKES", "description": "number of available bikes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BANKING": {"name": "BANKING", "description": "banking", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BIKE_STANDS": {"name": "BIKE_STANDS", "description": "number of bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BONUS": {"name": "BONUS", "description": "bonus", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "name of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE": {"name": "LAST_UPDATE", "description": "last update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE_TS": {"name": "LAST_UPDATE_TS", "description": "last update in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of the bike stand7", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NUMBER": {"name": "NUMBER", "description": "number of the bike stand (id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAT": {"name": "LAT", "description": "latitude point of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LONG": {"name": "LONG", "description": "longitude point of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "status of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public.raw_villo_1", "created_at": 1688129737.978333}, "source.villo_cjaminon_team2.source_data.raw_weather_1": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public", "name": "raw_weather_1", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\raw\\src_raw.yml", "original_file_path": "models\\raw\\src_raw.yml", "unique_id": "source.villo_cjaminon_team2.source_data.raw_weather_1", "fqn": ["villo_cjaminon_team2", "raw", "source_data", "raw_weather_1"], "source_name": "source_data", "source_description": "source data where the villo data arrives in real time coming from a snowpipe", "loader": "", "identifier": "raw_weather_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "weather data flattened", "columns": {"RECORDING_TIME": {"name": "RECORDING_TIME", "description": "recording time of the data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECORDING_TIME_TS": {"name": "RECORDING_TIME_TS", "description": "recording time in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRESSURE": {"name": "PRESSURE", "description": "pressure at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HUMIDITY": {"name": "HUMIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "descripiton": "humidity at that given time"}, "TEMPERATURE": {"name": "TEMPERATURE", "description": "temperature at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "APPARENTTEMPERATURE": {"name": "APPARENTTEMPERATURE", "description": "temperature in a specific format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WEATHER_TYPE": {"name": "WEATHER_TYPE", "description": "type of weather", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "latitude point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "longitude point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "load time stamp in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public.raw_weather_1", "created_at": 1688129738.0043323}, "source.villo_cjaminon_team2.reference_data.communes_bxl_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_str", "name": "communes_bxl_geo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\structured\\src_str.yml", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "source.villo_cjaminon_team2.reference_data.communes_bxl_geo", "fqn": ["villo_cjaminon_team2", "structured", "reference_data", "communes_bxl_geo"], "source_name": "reference_data", "source_description": "location of the commune reference data", "loader": "", "identifier": "communes_bxl_geo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Polygons of belgian municipalities", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_str.communes_bxl_geo", "created_at": 1688129738.005333}, "source.villo_cjaminon_team2.reference_data.str_villo_communes_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_str", "name": "str_villo_communes_geo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\structured\\src_str.yml", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "source.villo_cjaminon_team2.reference_data.str_villo_communes_geo", "fqn": ["villo_cjaminon_team2", "structured", "reference_data", "str_villo_communes_geo"], "source_name": "reference_data", "source_description": "location of the commune reference data", "loader": "", "identifier": "str_villo_communes_geo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "geography of communes for the villo data", "columns": {"UID": {"name": "UID", "description": "unique identifier (number + lastupdate)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "timestamp when files is loaded in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "address of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKE_STANDS": {"name": "AVAILABLE_BIKE_STANDS", "description": "number of available bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKES": {"name": "AVAILABLE_BIKES", "description": "number of available bikes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BANKING": {"name": "BANKING", "description": "banking", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BIKE_STANDS": {"name": "BIKE_STANDS", "description": "number of bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BONUS": {"name": "BONUS", "description": "bonus", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "name of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE": {"name": "LAST_UPDATE", "description": "last update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE_TS": {"name": "LAST_UPDATE_TS", "description": "last update in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of the bike stand7", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NUMBER": {"name": "NUMBER", "description": "number of the bike stand (id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "status of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADMUNAFR": {"name": "ADMUNAFR", "description": "name of adm", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMUNES": {"name": "COMMUNES", "description": "names of communes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE_INS": {"name": "CODE_INS", "description": "code of the commune", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ARROND": {"name": "ARROND", "description": "number of the arround", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_str.str_villo_communes_geo", "created_at": 1688129738.056622}, "source.villo_cjaminon_team2.reference_data.str_villo_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_str", "name": "str_villo_geo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\structured\\src_str.yml", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "source.villo_cjaminon_team2.reference_data.str_villo_geo", "fqn": ["villo_cjaminon_team2", "structured", "reference_data", "str_villo_geo"], "source_name": "reference_data", "source_description": "location of the commune reference data", "loader": "", "identifier": "str_villo_geo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"UID": {"name": "UID", "description": "unique identifier (number + lastupdate)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "timestamp when files is loaded in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "address of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKE_STANDS": {"name": "AVAILABLE_BIKE_STANDS", "description": "number of available bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVAILABLE_BIKES": {"name": "AVAILABLE_BIKES", "description": "number of available bikes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BANKING": {"name": "BANKING", "description": "banking", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BIKE_STANDS": {"name": "BIKE_STANDS", "description": "number of bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BONUS": {"name": "BONUS", "description": "bonus", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "name of the region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE": {"name": "LAST_UPDATE", "description": "last update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAST_UPDATE_TS": {"name": "LAST_UPDATE_TS", "description": "last update in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of the bike stand7", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NUMBER": {"name": "NUMBER", "description": "number of the bike stand (id)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LAT": {"name": "LAT", "description": "latitude point of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LONG": {"name": "LONG", "description": "longitude point of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "status of the bike stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "GEOPOINT": {"name": "GEOPOINT", "description": "geopoint of the commune", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_str.str_villo_geo", "created_at": 1688129738.1066215}, "source.villo_cjaminon_team2.reference_data.str_weather_communes_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_str", "name": "str_weather_communes_geo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\structured\\src_str.yml", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "source.villo_cjaminon_team2.reference_data.str_weather_communes_geo", "fqn": ["villo_cjaminon_team2", "structured", "reference_data", "str_weather_communes_geo"], "source_name": "reference_data", "source_description": "location of the commune reference data", "loader": "", "identifier": "str_weather_communes_geo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "geography of communes for the weather data", "columns": {"RECORDING_TIME_TS": {"name": "RECORDING_TIME_TS", "description": "recording time in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRESSURE": {"name": "PRESSURE", "description": "pressure at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HUMIDITY": {"name": "HUMIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "descripiton": "humidity at that given time"}, "TEMPERATURE": {"name": "TEMPERATURE", "description": "temperature at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "APPARENTTEMPERATURE": {"name": "APPARENTTEMPERATURE", "description": "temperature in a specific format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WEATHER_TYPE": {"name": "WEATHER_TYPE", "description": "type of weather", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADMUNAFR": {"name": "ADMUNAFR", "description": "name of adm", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMUNES": {"name": "COMMUNES", "description": "names of communes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE_INS": {"name": "CODE_INS", "description": "code of the commune", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ARROND": {"name": "ARROND", "description": "number of the arround", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_str.str_weather_communes_geo", "created_at": 1688129738.1356225}, "source.villo_cjaminon_team2.reference_data.str_weather_geo": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_str", "name": "str_weather_geo", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\structured\\src_str.yml", "original_file_path": "models\\structured\\src_str.yml", "unique_id": "source.villo_cjaminon_team2.reference_data.str_weather_geo", "fqn": ["villo_cjaminon_team2", "structured", "reference_data", "str_weather_geo"], "source_name": "reference_data", "source_description": "location of the commune reference data", "loader": "", "identifier": "str_weather_geo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "table with the geopoint of the commune for the weather data", "columns": {"RECORDING_TIME": {"name": "RECORDING_TIME", "description": "recording time of the data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECORDING_TIME_TS": {"name": "RECORDING_TIME_TS", "description": "recording time in a date format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRESSURE": {"name": "PRESSURE", "description": "pressure at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HUMIDITY": {"name": "HUMIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "descripiton": "humidity at that given time"}, "TEMPERATURE": {"name": "TEMPERATURE", "description": "temperature at that given time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "APPARENTTEMPERATURE": {"name": "APPARENTTEMPERATURE", "description": "temperature in a specific format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WEATHER_TYPE": {"name": "WEATHER_TYPE", "description": "type of weather", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "latitude point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "longitude point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "load time stamp in snowflake", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "GEOPOINT": {"name": "GEOPOINT", "description": "geopoint of the commune", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_str.str_weather_geo", "created_at": 1688129738.1636214}, "source.villo_cjaminon_team2.source_data.analytics_stand_weather": {"database": "OPENMETA_CJAMINON_TEAM2", "schema": "public_analytics", "name": "analytics_stand_weather", "resource_type": "source", "package_name": "villo_cjaminon_team2", "path": "models\\analytics\\src_analytics.yml", "original_file_path": "models\\analytics\\src_analytics.yml", "unique_id": "source.villo_cjaminon_team2.source_data.analytics_stand_weather", "fqn": ["villo_cjaminon_team2", "analytics", "source_data", "analytics_stand_weather"], "source_name": "source_data", "source_description": "analytics data where structured are enhance with aggregation", "loader": "", "identifier": "analytics_stand_weather", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "analytics data of villo bike", "columns": {"STATION_COMMUNE": {"name": "STATION_COMMUNE", "description": "name of the commune of the stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE_INS": {"name": "CODE_INS", "description": "code of the commune", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATION_NAME": {"name": "STATION_NAME", "description": "name of the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATION_STATUS": {"name": "STATION_STATUS", "description": "status of the station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATION_ADDRESS": {"name": "STATION_ADDRESS", "description": "adress of the stand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECORDING_TIME_HR": {"name": "RECORDING_TIME_HR", "description": "recording time of the aggregation of the report", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WEATHER_TYPE_MODE": {"name": "WEATHER_TYPE_MODE", "description": "type of the weather", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRESSURE_AVG": {"name": "PRESSURE_AVG", "description": "average of the pressure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HUMIDITY_AVG": {"name": "HUMIDITY_AVG", "description": "average of the humidity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEMP_AVG": {"name": "TEMP_AVG", "description": "average of the temperature", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "APPARENTTEMPERATURE_AVG": {"name": "APPARENTTEMPERATURE_AVG", "description": "average of the apparent temperature", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_AVAILABLE_BIKES": {"name": "AVERAGE_AVAILABLE_BIKES", "description": "average available bike", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_BROKEN_STANDS": {"name": "AVERAGE_BROKEN_STANDS", "description": "average of broken stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_AVAILABLE_BIKE_STANDS": {"name": "AVERAGE_AVAILABLE_BIKE_STANDS", "description": "average of available bike stands", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATION_CAPACITY": {"name": "STATION_CAPACITY", "description": "station capacity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPENMETA_CJAMINON_TEAM2.public_analytics.analytics_stand_weather", "created_at": 1688130235.2952676}}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2259774, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2279756, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2279756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2289777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2299771, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2309797, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2319787, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2319787, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2329812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2329812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.233978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.233978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2349772, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2349772, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2349772, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2359796, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2359796, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2369788, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2379818, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2379818, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2389789, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2389789, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2389789, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2399783, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.242978, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2479775, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2479775, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.249977, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.249977, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2509775, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2539775, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2539775, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2549775, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.257978, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.257978, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.257978, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2589784, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2599785, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2599785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2599785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2599785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.260979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.260979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2619777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2619777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2619777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2619777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2629755, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2640307, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2652147, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2652147, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2652147, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2660718, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2660718, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2660718, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2660718, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.267056, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.267056, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.267056, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.267056, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2680545, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2690647, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2690647, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2690647, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2706432, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2736502, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2736502, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2736502, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2746518, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2746518, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2746518, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2756498, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2766495, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2766495, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2766495, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.27765, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.27865, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.27865, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.27965, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28065, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28065, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2816494, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2816494, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2816494, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2826493, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2836504, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2846503, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2846503, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2846503, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2856505, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2856505, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2856505, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2866492, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2866492, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2866492, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2876499, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2876499, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28865, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28865, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28865, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.28965, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2926497, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2936497, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2936497, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2936497, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2946498, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2946498, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2946498, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2956498, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2956498, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2956498, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2956498, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2966497, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2966497, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2976494, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2976494, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2976494, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2986498, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2986498, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.2986498, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.29965, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.29965, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.29965, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30065, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30065, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30065, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30065, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30065, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3016493, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3016493, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30365, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.30565, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3067427, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3067427, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3086646, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3096669, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3096669, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.310667, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.310667, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.311664, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.311664, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3126714, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3126714, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3136604, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3136604, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3146496, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3146496, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.315663, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.315663, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.315663, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3166494, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3176668, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3186696, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3186696, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3186696, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3186696, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3206632, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.321667, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3226497, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3226497, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.323663, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.33065, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3316677, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3376675, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3406672, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3406672, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3436685, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3447561, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3467374, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.354471, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.35647, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3584704, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3594706, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.360472, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.360472, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.361471, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.361471, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.361471, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3624701, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3624701, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3624701, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3634698, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3634698, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3634698, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3644707, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3654702, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3654702, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3664706, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3664706, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3684697, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3684697, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3694704, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3704708, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3704708, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3704708, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3714705, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3724704, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3724704, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3734703, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3764699, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3784711, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.37947, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.37947, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.37947, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3804703, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3804703, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3804703, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3844697, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3894696, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3904724, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3914704, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3914704, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3924704, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3924704, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3924704, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3924704, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3924704, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3934703, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3934703, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3944705, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.3954701, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4004703, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4044707, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4044707, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4044707, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4054704, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4054704, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4054704, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4054704, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4074697, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4074697, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4074697, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.40847, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4154701, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4164703, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4164703, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4214702, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4214702, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4214702, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4224703, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4224703, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.42347, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4254699, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4274697, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4274697, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.428471, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.43147, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.43147, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4324708, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.43347, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4344702, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4354706, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4364705, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4364705, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4374714, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4374714, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4384713, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4384713, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4384713, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4384713, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4394708, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4394708, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.440471, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.440471, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.440471, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4414716, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4414716, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4414716, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.442471, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.442471, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.443471, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.443471, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.443471, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.444471, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.444471, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.444471, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.444471, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.444471, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.44547, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.44547, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.44547, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4464881, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4464881, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4464881, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.447471, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.447471, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.447471, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.447471, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4484706, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4484706, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4484706, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4494708, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4494708, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4494708, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4494708, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4504707, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4504707, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4504707, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4504707, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4514706, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4514706, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4514706, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4524715, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4524715, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4534707, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4534707, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4534707, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4544706, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4544706, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4544706, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4554706, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4554706, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4554706, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.456471, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.456471, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.457474, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.457474, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.457474, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4584703, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4584703, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4594705, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688129737.4594705, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.villo_cjaminon_team2.analytics_stand_per_hour": ["model.villo_cjaminon_team2.str_villo_communes_geo"], "model.villo_cjaminon_team2.analytics_stand_weather": ["model.villo_cjaminon_team2.str_villo_communes_geo", "model.villo_cjaminon_team2.str_weather_communes_geo"], "model.villo_cjaminon_team2.analytics_stand_weather_2": ["model.villo_cjaminon_team2.str_villo_communes_geo", "model.villo_cjaminon_team2.str_weather_communes_geo"], "model.villo_cjaminon_team2.raw_current_weather": ["source.villo_cjaminon_team2.source_data.raw_weather"], "model.villo_cjaminon_team2.raw_last_bike_stands": ["model.villo_cjaminon_team2.raw_villo"], "model.villo_cjaminon_team2.raw_last_closed_bike_stands": ["model.villo_cjaminon_team2.raw_last_bike_stands"], "model.villo_cjaminon_team2.raw_unavailable_bike_stands": ["model.villo_cjaminon_team2.raw_villo"], "model.villo_cjaminon_team2.raw_villo": ["source.villo_cjaminon_team2.source_data.raw_villo"], "model.villo_cjaminon_team2.raw_weather_1": ["source.villo_cjaminon_team2.source_data.raw_weather"], "model.villo_cjaminon_team2.str_villo_communes_geo": ["model.villo_cjaminon_team2.str_villo_geo", "source.villo_cjaminon_team2.reference_data.communes_bxl_geo"], "model.villo_cjaminon_team2.str_villo_geo": ["model.villo_cjaminon_team2.raw_villo"], "model.villo_cjaminon_team2.str_weather_communes_geo": ["model.villo_cjaminon_team2.str_weather_geo", "source.villo_cjaminon_team2.reference_data.communes_bxl_geo"], "model.villo_cjaminon_team2.str_weather_geo": ["model.villo_cjaminon_team2.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_FILENAME.ec41220f81": ["source.villo_cjaminon_team2.source_data.raw_villo"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_TIMESTAMP.4c1543ad14": ["source.villo_cjaminon_team2.source_data.raw_villo"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_DATA.e3a0ee1bf3": ["source.villo_cjaminon_team2.source_data.raw_villo"], "test.villo_cjaminon_team2.source_unique_source_data_raw_weather_FILENAME.f6bf124fff": ["source.villo_cjaminon_team2.source_data.raw_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_FILENAME.64d00c44b7": ["source.villo_cjaminon_team2.source_data.raw_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_TIMESTAMP.6278746a73": ["source.villo_cjaminon_team2.source_data.raw_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_DATA.ec2efcdd95": ["source.villo_cjaminon_team2.source_data.raw_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_UID.8cb4382565": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_TIMESTAMP.edaa90475e": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_ADDRESS.50ea711335": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.7dba722bec": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.f5619dadf6": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BANKING.c0dd682ac1": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE.ffaac3a045": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BIKE_STANDS.f98e46388f": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BONUS.8546fa955b": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE.3e8b4856c7": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_CONTRACT_NAME.c6f905bd4d": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE.8b21332ee7": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.10ab87af7f": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NAME.e115fe51cf": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NUMBER.283fbf7179": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAT.7ff6e35f9e": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LONG.98b20498e4": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_STATUS.aeaed074f3": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED.4643176138": ["source.villo_cjaminon_team2.source_data.raw_villo_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME.2ec93bd825": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.623d7d0668": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_PRESSURE.dbb3a329d1": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_HUMIDITY.ef910b5bd1": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TEMPERATURE.871a7d5e59": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.5407b8fcb8": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_WEATHER_TYPE.02e44988e0": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.c23f67773a": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LATITUDE.77e2cd569d": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LONGITUDE.142297a71f": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TIMESTAMP.ed10c6c397": ["source.villo_cjaminon_team2.source_data.raw_weather_1"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_UID.319b840cd7": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.a653bcc217": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADDRESS.1be2181190": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS.85578eabda": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES.5a621b7282": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BANKING.c573ec7b58": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE.2badefa14f": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS.a423b8a8da": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BONUS.725eb93075": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE.43c7f5d44d": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME.4bed1f7211": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE.068dda36c3": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS.c0444e2254": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NAME.1320330e2d": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NUMBER.156e141111": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_STATUS.29585e485f": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED.882177b98d": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.44cbeec308": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_COMMUNES.33d6d9ac58": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CODE_INS.43827eb8a0": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ARROND.8bff71c14e": ["source.villo_cjaminon_team2.reference_data.str_villo_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_UID.321342b8cc": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_TIMESTAMP.b9967cf240": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_ADDRESS.639cf923b8": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS.d47b955486": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.11ee69ba97": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BANKING.5c7f0702a9": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE.8cb35c77d2": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BIKE_STANDS.a9234ace67": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BONUS.0779352f3a": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE.b47ea69aa6": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.651f051cc7": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE.0504fffe6e": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.336c0c1727": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NAME.7202e6069a": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NUMBER.e3a20bb654": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAT.2a1095f2f5": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LONG.23b57164bf": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_STATUS.43405aa6da": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED.ccfea4b682": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_GEOPOINT.b95e6c0ad6": ["source.villo_cjaminon_team2.reference_data.str_villo_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS.33a3608809": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_PRESSURE.f38c911b11": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_HUMIDITY.060125a85d": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE.a9bd7ca496": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE.2e9d5d0eb4": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE.09f51e70f6": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.b7993cb3b3": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR.118662c73d": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_COMMUNES.2b0c6a8fd0": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_CODE_INS.f15d75bc0f": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ARROND.5a66f3d105": ["source.villo_cjaminon_team2.reference_data.str_weather_communes_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME.9ec1c10c43": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS.bfac7fa1fe": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_PRESSURE.1702df875e": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_HUMIDITY.535f21e04b": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TEMPERATURE.e392694875": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE.8b8b8051ab": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.8a6b5bd820": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.68be29403c": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LATITUDE.18a280935c": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LONGITUDE.4f6f2ba3b0": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TIMESTAMP.cf434902de": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_GEOPOINT.0470ed5ac9": ["source.villo_cjaminon_team2.reference_data.str_weather_geo"], "test.villo_cjaminon_team2.source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME.d2232f76be": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE.165fe39d81": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_CODE_INS.c57c9213f5": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_NAME.fc298a0bb7": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_STATUS.b342ff0348": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED.c91a81b281": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS.bf5e050512": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR.8d95c09093": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES.d98a39ac07": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS.cbd9df0b5d": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS.c8e2d25fb3": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY.7753aba920": ["source.villo_cjaminon_team2.source_data.analytics_stand_weather"], "model.villo_cjaminon_team2.lat_lon_validity": ["model.villo_cjaminon_team2.str_villo_geo"], "model.villo_cjaminon_team2.toohot": ["model.villo_cjaminon_team2.str_weather_geo"], "source.villo_cjaminon_team2.source_data.raw_villo": [], "source.villo_cjaminon_team2.source_data.raw_weather": [], "source.villo_cjaminon_team2.source_data.raw_villo_1": [], "source.villo_cjaminon_team2.source_data.raw_weather_1": [], "source.villo_cjaminon_team2.reference_data.communes_bxl_geo": [], "source.villo_cjaminon_team2.reference_data.str_villo_communes_geo": [], "source.villo_cjaminon_team2.reference_data.str_villo_geo": [], "source.villo_cjaminon_team2.reference_data.str_weather_communes_geo": [], "source.villo_cjaminon_team2.reference_data.str_weather_geo": [], "source.villo_cjaminon_team2.source_data.analytics_stand_weather": []}, "child_map": {"model.villo_cjaminon_team2.analytics_stand_per_hour": [], "model.villo_cjaminon_team2.analytics_stand_weather": [], "model.villo_cjaminon_team2.analytics_stand_weather_2": [], "model.villo_cjaminon_team2.raw_current_weather": [], "model.villo_cjaminon_team2.raw_last_bike_stands": ["model.villo_cjaminon_team2.raw_last_closed_bike_stands"], "model.villo_cjaminon_team2.raw_last_closed_bike_stands": [], "model.villo_cjaminon_team2.raw_unavailable_bike_stands": [], "model.villo_cjaminon_team2.raw_villo": ["model.villo_cjaminon_team2.raw_last_bike_stands", "model.villo_cjaminon_team2.raw_unavailable_bike_stands", "model.villo_cjaminon_team2.str_villo_geo"], "model.villo_cjaminon_team2.raw_weather_1": ["model.villo_cjaminon_team2.str_weather_geo"], "model.villo_cjaminon_team2.str_villo_communes_geo": ["model.villo_cjaminon_team2.analytics_stand_per_hour", "model.villo_cjaminon_team2.analytics_stand_weather", "model.villo_cjaminon_team2.analytics_stand_weather_2"], "model.villo_cjaminon_team2.str_villo_geo": ["model.villo_cjaminon_team2.lat_lon_validity", "model.villo_cjaminon_team2.str_villo_communes_geo"], "model.villo_cjaminon_team2.str_weather_communes_geo": ["model.villo_cjaminon_team2.analytics_stand_weather", "model.villo_cjaminon_team2.analytics_stand_weather_2"], "model.villo_cjaminon_team2.str_weather_geo": ["model.villo_cjaminon_team2.str_weather_communes_geo", "model.villo_cjaminon_team2.toohot"], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_FILENAME.ec41220f81": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_TIMESTAMP.4c1543ad14": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_DATA.e3a0ee1bf3": [], "test.villo_cjaminon_team2.source_unique_source_data_raw_weather_FILENAME.f6bf124fff": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_FILENAME.64d00c44b7": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_TIMESTAMP.6278746a73": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_DATA.ec2efcdd95": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_UID.8cb4382565": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_TIMESTAMP.edaa90475e": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_ADDRESS.50ea711335": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.7dba722bec": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.f5619dadf6": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BANKING.c0dd682ac1": [], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE.ffaac3a045": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BIKE_STANDS.f98e46388f": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BONUS.8546fa955b": [], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE.3e8b4856c7": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_CONTRACT_NAME.c6f905bd4d": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE.8b21332ee7": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.10ab87af7f": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NAME.e115fe51cf": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NUMBER.283fbf7179": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAT.7ff6e35f9e": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LONG.98b20498e4": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_STATUS.aeaed074f3": [], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED.4643176138": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME.2ec93bd825": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.623d7d0668": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_PRESSURE.dbb3a329d1": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_HUMIDITY.ef910b5bd1": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TEMPERATURE.871a7d5e59": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.5407b8fcb8": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_WEATHER_TYPE.02e44988e0": [], "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.c23f67773a": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LATITUDE.77e2cd569d": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LONGITUDE.142297a71f": [], "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TIMESTAMP.ed10c6c397": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_UID.319b840cd7": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.a653bcc217": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADDRESS.1be2181190": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS.85578eabda": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES.5a621b7282": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BANKING.c573ec7b58": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE.2badefa14f": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS.a423b8a8da": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BONUS.725eb93075": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE.43c7f5d44d": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME.4bed1f7211": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE.068dda36c3": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS.c0444e2254": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NAME.1320330e2d": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NUMBER.156e141111": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_STATUS.29585e485f": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED.882177b98d": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.44cbeec308": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_COMMUNES.33d6d9ac58": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CODE_INS.43827eb8a0": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ARROND.8bff71c14e": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_UID.321342b8cc": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_TIMESTAMP.b9967cf240": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_ADDRESS.639cf923b8": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS.d47b955486": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.11ee69ba97": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BANKING.5c7f0702a9": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE.8cb35c77d2": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BIKE_STANDS.a9234ace67": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BONUS.0779352f3a": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE.b47ea69aa6": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.651f051cc7": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE.0504fffe6e": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.336c0c1727": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NAME.7202e6069a": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NUMBER.e3a20bb654": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAT.2a1095f2f5": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LONG.23b57164bf": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_STATUS.43405aa6da": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED.ccfea4b682": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_GEOPOINT.b95e6c0ad6": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS.33a3608809": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_PRESSURE.f38c911b11": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_HUMIDITY.060125a85d": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE.a9bd7ca496": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE.2e9d5d0eb4": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE.09f51e70f6": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.b7993cb3b3": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR.118662c73d": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_COMMUNES.2b0c6a8fd0": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_CODE_INS.f15d75bc0f": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ARROND.5a66f3d105": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME.9ec1c10c43": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS.bfac7fa1fe": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_PRESSURE.1702df875e": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_HUMIDITY.535f21e04b": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TEMPERATURE.e392694875": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE.8b8b8051ab": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.8a6b5bd820": [], "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.68be29403c": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LATITUDE.18a280935c": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LONGITUDE.4f6f2ba3b0": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TIMESTAMP.cf434902de": [], "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_GEOPOINT.0470ed5ac9": [], "test.villo_cjaminon_team2.source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME.d2232f76be": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE.165fe39d81": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_CODE_INS.c57c9213f5": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_NAME.fc298a0bb7": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_STATUS.b342ff0348": [], "test.villo_cjaminon_team2.source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED.c91a81b281": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS.bf5e050512": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR.8d95c09093": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES.d98a39ac07": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS.cbd9df0b5d": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS.c8e2d25fb3": [], "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY.7753aba920": [], "model.villo_cjaminon_team2.lat_lon_validity": [], "model.villo_cjaminon_team2.toohot": [], "source.villo_cjaminon_team2.source_data.raw_villo": ["model.villo_cjaminon_team2.raw_villo", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_DATA.e3a0ee1bf3", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_FILENAME.ec41220f81", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_TIMESTAMP.4c1543ad14"], "source.villo_cjaminon_team2.source_data.raw_weather": ["model.villo_cjaminon_team2.raw_current_weather", "model.villo_cjaminon_team2.raw_weather_1", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_DATA.ec2efcdd95", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_FILENAME.64d00c44b7", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_TIMESTAMP.6278746a73", "test.villo_cjaminon_team2.source_unique_source_data_raw_weather_FILENAME.f6bf124fff"], "source.villo_cjaminon_team2.source_data.raw_villo_1": ["test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BANKING__TRUE__FALSE.ffaac3a045", "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_BONUS__TRUE__FALSE.3e8b4856c7", "test.villo_cjaminon_team2.source_accepted_values_source_data_raw_villo_1_STATUS__OPEN__CLOSED.4643176138", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_ADDRESS.50ea711335", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKES.f5619dadf6", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_AVAILABLE_BIKE_STANDS.7dba722bec", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BANKING.c0dd682ac1", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BIKE_STANDS.f98e46388f", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_BONUS.8546fa955b", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_CONTRACT_NAME.c6f905bd4d", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE.8b21332ee7", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAST_UPDATE_TS.10ab87af7f", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LAT.7ff6e35f9e", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_LONG.98b20498e4", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NAME.e115fe51cf", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_NUMBER.283fbf7179", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_STATUS.aeaed074f3", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_TIMESTAMP.edaa90475e", "test.villo_cjaminon_team2.source_not_null_source_data_raw_villo_1_UID.8cb4382565"], "source.villo_cjaminon_team2.source_data.raw_weather_1": ["test.villo_cjaminon_team2.source_accepted_values_source_data_raw_weather_1_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.c23f67773a", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_APPARENTTEMPERATURE.5407b8fcb8", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_HUMIDITY.ef910b5bd1", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LATITUDE.77e2cd569d", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_LONGITUDE.142297a71f", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_PRESSURE.dbb3a329d1", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME.2ec93bd825", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_RECORDING_TIME_TS.623d7d0668", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TEMPERATURE.871a7d5e59", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_TIMESTAMP.ed10c6c397", "test.villo_cjaminon_team2.source_not_null_source_data_raw_weather_1_WEATHER_TYPE.02e44988e0"], "source.villo_cjaminon_team2.reference_data.communes_bxl_geo": ["model.villo_cjaminon_team2.str_villo_communes_geo", "model.villo_cjaminon_team2.str_weather_communes_geo"], "source.villo_cjaminon_team2.reference_data.str_villo_communes_geo": ["test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BANKING__TRUE__FALSE.2badefa14f", "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_BONUS__TRUE__FALSE.43c7f5d44d", "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_communes_geo_STATUS__OPEN__CLOSED.882177b98d", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADDRESS.1be2181190", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ADMUNAFR.44cbeec308", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_ARROND.8bff71c14e", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKES.5a621b7282", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_AVAILABLE_BIKE_STANDS.85578eabda", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BANKING.c573ec7b58", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BIKE_STANDS.a423b8a8da", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_BONUS.725eb93075", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CODE_INS.43827eb8a0", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_COMMUNES.33d6d9ac58", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_CONTRACT_NAME.4bed1f7211", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE.068dda36c3", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_LAST_UPDATE_TS.c0444e2254", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NAME.1320330e2d", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_NUMBER.156e141111", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_STATUS.29585e485f", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_TIMESTAMP.a653bcc217", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_communes_geo_UID.319b840cd7"], "source.villo_cjaminon_team2.reference_data.str_villo_geo": ["test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BANKING__TRUE__FALSE.8cb35c77d2", "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_BONUS__TRUE__FALSE.b47ea69aa6", "test.villo_cjaminon_team2.source_accepted_values_reference_data_str_villo_geo_STATUS__OPEN__CLOSED.ccfea4b682", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_ADDRESS.639cf923b8", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKES.11ee69ba97", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_AVAILABLE_BIKE_STANDS.d47b955486", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BANKING.5c7f0702a9", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BIKE_STANDS.a9234ace67", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_BONUS.0779352f3a", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_CONTRACT_NAME.651f051cc7", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_GEOPOINT.b95e6c0ad6", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE.0504fffe6e", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAST_UPDATE_TS.336c0c1727", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LAT.2a1095f2f5", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_LONG.23b57164bf", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NAME.7202e6069a", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_NUMBER.e3a20bb654", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_STATUS.43405aa6da", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_TIMESTAMP.b9967cf240", "test.villo_cjaminon_team2.source_not_null_reference_data_str_villo_geo_UID.321342b8cc"], "source.villo_cjaminon_team2.reference_data.str_weather_communes_geo": ["test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_communes_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.b7993cb3b3", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ADMUNAFR.118662c73d", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_APPARENTTEMPERATURE.2e9d5d0eb4", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_ARROND.5a66f3d105", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_CODE_INS.f15d75bc0f", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_COMMUNES.2b0c6a8fd0", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_HUMIDITY.060125a85d", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_PRESSURE.f38c911b11", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_RECORDING_TIME_TS.33a3608809", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_TEMPERATURE.a9bd7ca496", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_communes_geo_WEATHER_TYPE.09f51e70f6"], "source.villo_cjaminon_team2.reference_data.str_weather_geo": ["test.villo_cjaminon_team2.source_accepted_values_reference_data_str_weather_geo_WEATHER_TYPE__partly_cloudy_night__cloudy__clear_night__clear_day__partly_cloudy_day__rain__wind__fog__snow.68be29403c", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_APPARENTTEMPERATURE.8b8b8051ab", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_GEOPOINT.0470ed5ac9", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_HUMIDITY.535f21e04b", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LATITUDE.18a280935c", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_LONGITUDE.4f6f2ba3b0", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_PRESSURE.1702df875e", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME.9ec1c10c43", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_RECORDING_TIME_TS.bfac7fa1fe", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TEMPERATURE.e392694875", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_TIMESTAMP.cf434902de", "test.villo_cjaminon_team2.source_not_null_reference_data_str_weather_geo_WEATHER_TYPE.8a6b5bd820"], "source.villo_cjaminon_team2.source_data.analytics_stand_weather": ["test.villo_cjaminon_team2.source_accepted_values_source_data_analytics_stand_weather_STATION_STATUS__OPEN__CLOSED.c91a81b281", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKES.d98a39ac07", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_AVAILABLE_BIKE_STANDS.c8e2d25fb3", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_AVERAGE_BROKEN_STANDS.cbd9df0b5d", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_CODE_INS.c57c9213f5", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_RECORDING_TIME_HR.8d95c09093", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_ADDRESS.bf5e050512", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_CAPACITY.7753aba920", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_COMMUNE.165fe39d81", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_NAME.fc298a0bb7", "test.villo_cjaminon_team2.source_not_null_source_data_analytics_stand_weather_STATION_STATUS.b342ff0348", "test.villo_cjaminon_team2.source_unique_source_data_analytics_stand_weather_RECORDING_TIME_HR_STATION_NAME.d2232f76be"]}, "group_map": {}}